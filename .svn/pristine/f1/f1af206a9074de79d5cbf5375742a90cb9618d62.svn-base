#line 2 "pgc.c"

#line 4 "pgc.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[794] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,   12,    0,    0,    0,    0,
        0,    0,   11,   11,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  143,  141,  111,   89,   89,  111,   53,  111,
       72,   83,  111,   19,   87,   88,   82,   85,   81,   86,
      111,   84,   62,   62,   79,   80,  111,   94,  111,   78,
       78,   92,   93,   90,  111,   91,   70,    1,    1,   60,
       46,   60,   58,   59,   20,   59,   59,   59,   59,   62,
       59,   69,   69,   69,   69,   69,   69,  140,  140,  140,

      140,  136,  136,  135,  134,  133,  117,  117,   12,    9,
        5,    5,    6,    6,   52,   48,   54,   49,   54,   11,
       16,   33,   33,   25,   39,   32,   27,   23,   23,   32,
       43,   43,   45,  132,  132,  130,   89,   89,  130,  130,
       50,   29,    0,    0,  103,    0,    0,    0,    0,    0,
        0,    0,  108,   99,  106,  100,  104,  101,  105,   95,
      110,   64,    2,    0,  107,   64,   62,    0,   74,   97,
      102,   96,   78,   78,   98,    1,    0,   60,   60,    0,
        0,   41,   61,   40,    1,   56,   64,    2,   64,   62,
       66,   55,   57,   68,   69,    8,   21,   18,    0,   15,

        0,  139,    0,    0,    0,  135,  133,    0,    0,  116,
       12,    9,    9,   10,    5,    7,    4,    3,   52,   51,
       54,   11,   16,   16,   17,   33,   25,   25,   30,   26,
       35,   36,   35,   35,   35,   32,   27,   27,   28,   23,
       23,   24,   31,   43,   42,   44,    0,    0,  131,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   77,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  109,    2,    0,   73,   64,
        0,   65,   74,   78,   60,   40,    1,    1,    2,   64,
       62,   67,   68,    0,    0,    0,   47,   22,  138,  137,

        9,   14,   10,    9,    3,   16,   13,   17,   16,   25,
       38,   26,   25,   36,    0,    0,   37,   27,   28,   27,
       23,   24,   23,   44,    0,    0,    0,    0,    0,    0,
        0,    0,   77,   77,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       78,    0,   64,   62,   68,    0,    0,    0,   68,  138,
      138,  137,  137,    9,    9,    9,    9,   16,   16,   16,
       16,   25,   25,   25,   25,   36,    0,    0,   37,   27,
       27,   27,   27,   23,   23,   23,   23,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  125,    0,
        0,    0,    0,    0,    0,    0,   78,    0,   64,   64,
       68,    0,    0,    0,    0,    9,    9,    9,    9,    9,
       16,   16,   13,   16,   16,   25,   25,   25,   25,   25,
        0,    0,   27,   27,   27,   27,   27,   23,   23,   23,
       23,   23,    0,    0,    0,    0,    0,    0,    0,   38,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  125,    0,  127,    0,  121,    0,
        0,  115,    0,   78,    0,    0,   64,    0,    0,    0,
        0,   68,   68,    9,   16,   25,    0,   34,   27,   23,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      113,    0,  129,  121,  123,    0,  115,    0,   71,   63,
        0,    0,    0,    0,    0,   68,    0,    0,    0,    0,
        0,    0,    0,   75,   75,  113,  123,  119,   71,   71,
       78,   78,   78,   78,   63,   68,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   75,   75,   75,    0,   75,
        0,  119,    0,    0,    0,   78,   78,   78,   78,   78,
       78,   63,   68,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   78,   78,   78,   78,   78,   78,   78,   78,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   78,   78,   78,   78,
       78,   78,   78,   78,  124,    0,    0,    0,    0,    0,
        0,    0,    0,   50,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   29,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   78,  124,    0,  126,   78,   78,   78,
       78,   78,    0,  120,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
        0,   38,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   76,   76,    0,    0,  114,   78,

        0,  128,  120,   78,   78,  114,  122,    0,   50,    0,
        0,    0,    0,    0,   50,   50,    0,    0,    0,    0,
        0,    0,    0,   29,   29,    0,    0,    0,    0,    0,
       29,   29,   76,   76,   76,   76,  112,    0,  112,  122,
       78,    0,    0,    0,    0,    0,    0,    0,    0,   29,
        0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  118,  118,   50,    0,    0,    0,
        0,    0,    0,    0,    0,   29,   29,    0,    0,   29,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   28,   29,   30,   31,   32,   33,   34,
       35,   35,   36,   35,   35,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   35,   35,   47,   35,   35,
       48,   49,   50,   51,   52,   28,   29,   30,   31,   32,

       33,   34,   35,   35,   53,   35,   35,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   54,   35,   35,   55,
       35,   35,   56,   57,   58,   28,    1,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59
    } ;

static yyconst flex_int32_t yy_meta[60] =
    {   0,
        1,    2,    3,    3,    4,    5,    4,    6,    7,    4,
        8,    9,    9,   10,    7,    1,   11,   12,   10,   13,
       13,   13,   14,   15,   16,   17,   18,    4,   19,   19,
       19,   19,   19,   19,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   12,   21,    9,
        4,   20,   20,   20,   20,    1,    4,    1,   20
    } ;

static yyconst flex_int16_t yy_base[882] =
    {   0,
        0,    0,    0,    0,   59,    0,  113,  117,  122,  125,
      149,    0,  208,    0, 1750, 1745,  263,  316, 1749, 1745,
      263,  268, 1730, 1728,  273,  283, 1727, 1723, 1717, 1716,
      260,  264,  127,  128,  373,    0,  294,  303, 1707, 1704,
     1697, 1696, 1697, 4982, 4982,  297,  343, 1669, 4982,   86,
      316, 1667, 1680, 4982, 4982, 4982, 1655,  106, 4982,  266,
      337,  289,  415,  420, 4982, 4982, 1646, 1644, 1638,    0,
      232, 4982, 4982, 4982, 1603, 4982, 4982,  361,  442,    0,
     4982,  466,  435,    0, 4982, 4982, 1642,  443, 1641,  466,
      122,    0, 1643, 1641, 1639, 1639, 1636, 1622,    0, 4982,

        0, 4982,  336, 4982, 4982,    0, 4982,  448,    0,  465,
        0,    0,  305, 1627,    0, 1633, 4982, 4982,  279,    0,
      493,    0,    0,  501,  480,    0,  504,  525,  528, 1627,
        0,    0, 1628, 4982,  535, 4982, 4982, 4982,  301,  263,
      544,  549,  560,  319, 4982,  603,  420,  440, 1601,  472,
      322, 1594, 4982, 4982, 4982, 4982, 4982, 4982, 4982, 1617,
     4982,  535,    0, 1625, 4982,  549,  554,  563,    0, 4982,
     4982, 4982,    0, 1593, 4982,  589,  424,    0,  658,  109,
      482, 4982,  579, 1617,  711, 4982,  649,    0,  658,  672,
      680, 4982, 4982,  496,    0, 4982, 4982, 4982,  360, 4982,

     1598, 4982, 1614, 1590,  708, 4982,    0,  720,  731, 4982,
        0,  739,  743, 1595,    0,  420, 4982,    0,    0, 4982,
     4982,    0,  746,  755, 1590,    0,  767,  771, 4982, 1580,
     4982,  113,    0,    0,    0,    0,  774,  783, 1579,  793,
      800, 1574, 4982,    0, 4982, 1572,  777,  803, 4982, 1541,
     1531,  811, 1542, 1515,  816,  820, 1526, 1505,  846, 4982,
        0,    0,  685,  501, 1486, 1491,  526, 1470, 1470, 1463,
      660, 1463,  547, 1463, 1453, 4982,    0, 1476, 4982,  686,
      731,  814,    0, 1447,  897, 1461,    0,  950,    0,  820,
      825,  828,  681, 1440,    0,  892, 4982, 4982,  915,  925,

      852, 4982, 1449,  928,    0,  933, 4982, 1446,  949,  968,
     4982, 1445,  978,  469,    0,    0,    0,  985, 1433,  988,
      995, 1431, 1006, 1419, 1391, 1011, 1371, 1014, 1392, 1017,
     1361,    0,    0,    0, 1357, 1357, 1338, 1339, 1339, 1337,
     1321, 1314,  488, 1304, 1301,  541, 1296, 1296, 1288, 1291,
      869,  839, 1015, 1020,  781, 1041, 1047, 1052, 1070,  959,
     4982, 1074, 4982, 1078, 1082, 1090, 1102, 1106, 1109, 1112,
     1128, 1131, 1134, 1137, 1153, 4982,    0,    0, 4982, 1156,
     1159, 1162, 1178, 1181, 1184, 1187, 1203, 1206, 1209, 1212,
     1215, 1219, 1290, 1231, 1236, 1242, 1272, 1276, 1289, 1283,

     1280, 1261,  527, 1261, 1261, 1249,  543, 1252, 1268, 1295,
     1253, 1252, 1251,  620, 1249, 1298, 1239, 1285, 1290, 1294,
      791, 1342, 1333, 1399, 1337, 1360, 1371, 1393, 1453, 1377,
     1457, 1469, 1473, 1485, 1489, 1496, 1501, 1506, 1517, 1512,
        0,    0, 1522, 1533, 1538, 1543, 1549, 1554, 1559, 1570,
     1575, 1565, 1421, 1226, 1581, 1586, 1238, 1591, 1602, 1607,
     1612, 1640, 1660, 1665, 1235,    0, 1228, 1215, 1222,    0,
     1217, 1204, 1215, 1208, 1329, 1382, 4982, 1597, 1353, 1203,
     1199, 1479, 1188, 1191, 1510, 1654, 1658, 1719,    0,    0,
     1210,  850, 1776, 1681, 1685, 1701,    0, 4982, 1729, 1746,

     1188, 1750, 1183, 1795, 1798, 1814, 1162, 1169,    0, 1167,
     1697, 1713, 4982, 1756, 1762, 1166, 1769, 1160, 1867, 1762,
     1178, 1177,  700, 1893,    0, 1951,    0, 1825, 1818, 1160,
     1863, 1954, 1145, 1830, 1834, 1851, 1873, 1881, 2007,    0,
     1144,  728,  515, 1133, 1867, 2061,    0, 1908,  753, 1137,
     1971, 1978, 2002, 2119, 2012, 1888, 1893, 1902, 1086, 1912,
     1085, 1947, 1070,  642, 1062, 1066,  890, 1051,  793, 1048,
     1043, 4982,    0,    0,  950, 1038,  812, 2122, 2024,    0,
     1049, 2126, 2129, 2034,    0, 1045, 1026, 1014, 1005,  998,
      979,  678,  970,  967,  867,  960,  952,  921,  914,  881,

      877,  885,  875,  832, 2146,  841, 2167, 2184, 2187,  819,
     2203,  850,  886,  920,  789,  788,  777, 1982, 1994,  778,
      759,  731,  976,  727, 1988, 2018,  706,  669,  631, 2207,
     2223, 2233, 2243, 4982, 2253, 2263, 2279, 2282, 2298, 2301,
     2317, 2320, 2323, 4982, 2339, 2356, 2376, 2379,  557,  543,
      504,  978,  491,  489, 2030, 2150, 4982, 2219, 2055,  464,
      434, 2138, 2382, 2269,  413,  336, 2396, 2399, 2415, 2418,
     2435, 2445, 2456, 2473, 2476, 2492, 2502, 2512, 2522, 2532,
     2542,    0,  312, 2552, 2568, 2578, 2588, 2598, 2608, 2624,
     2634, 2644, 2654, 2664, 2304, 2421,  283,  263, 2498, 2508,

     2518, 4982, 2528, 2548,  248, 2558, 2571, 2674, 2670, 2686,
     2690, 2702, 2706, 2747, 2751,    0, 2767, 2770, 2786, 2803,
     2806, 2824, 2827, 2844, 4982, 2851, 2863, 2882, 2885, 2904,
     2908,    0, 2614, 2680, 2696, 2723, 2727,   87, 2731, 2735,
     2739, 2930, 2940, 2950, 2960, 2970, 2986, 2996, 3018, 3006,
     3034, 3044, 3054, 3064, 3074, 3092, 3102, 3112, 3122, 3132,
     3148, 3158, 3168, 3179, 2743, 2763, 3196, 3207, 3217, 3228,
     3245, 3255, 3273, 3276, 3293, 3309,    0, 3312, 3331, 3342,
     3367, 3370, 3389, 3400, 3416, 3434, 3438, 3457, 3461, 3483,
     3493, 3510, 4982, 3564, 3585, 3606, 3627, 3648, 3669, 3690,

     3711, 3732, 3753, 3774, 3795, 3816, 3832, 3849, 3862, 3869,
     3884, 3904, 3925, 3946, 3962, 3981, 4001, 4022, 4043, 4064,
     4085, 4105, 4126, 4147, 1237, 4167, 4184, 4202,  770, 4218,
     4238, 4256, 4269, 4286,  927,  955, 1033, 4299, 1007, 4318,
     4338, 4359, 4380, 1048, 1077, 1108, 4401, 4422, 4443, 4464,
     4480, 4500, 4521, 4542, 1109, 1130, 4563, 4584, 4605, 4626,
     1131, 1133, 4646, 1134, 1155, 1156, 4666, 4687, 4708, 4729,
     4750, 4771, 4792, 4813, 4834, 4855, 4876, 4897, 4918, 4939,
     4960
    } ;

static yyconst flex_int16_t yy_def[882] =
    {   0,
      794,  794,  793,    3,  793,    5,  795,  795,  796,  796,
      793,   11,  793,   13,  797,  797,  798,  798,  799,  799,
      800,  800,  801,  801,  802,  802,  803,  803,  803,  803,
      803,  803,  804,  804,  793,   35,  805,  805,  799,  799,
      803,  803,  793,  793,  793,  793,  793,  793,  793,  806,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  807,
      807,  793,  793,  793,  793,  793,  793,  793,  793,  808,
      793,  806,  809,  808,  793,  793,  808,  793,  808,  793,
      810,  811,  811,  811,  811,  811,  811,  812,  813,  793,

      814,  793,  793,  793,  793,  815,  793,  816,  817,  793,
      818,  818,  793,  793,  819,  793,  793,  793,  793,  820,
      793,  821,  821,  793,  822,  823,  793,  793,  793,  823,
      824,  824,  825,  793,  826,  793,  793,  793,  793,  793,
      793,  793,  793,  806,  793,  793,  146,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  827,  828,  793,  793,  793,  793,  829,  793,
      793,  793,  807,  807,  793,  793,  806,  808,  146,  146,
      793,  793,  793,  830,  831,  793,  793,  832,  793,  793,
      793,  793,  793,  833,  811,  793,  793,  793,  793,  793,

      812,  793,  813,  814,  793,  793,  815,  793,  816,  793,
      817,  793,  793,  793,  818,  793,  793,  834,  819,  793,
      793,  820,  793,  793,  793,  821,  793,  793,  793,  793,
      793,  793,  835,  836,  837,  823,  793,  793,  793,  793,
      793,  793,  793,  824,  793,  838,  793,  826,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  146,  793,
      259,  146,  259,  146,  146,  146,  259,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  827,  828,  793,  793,
      793,  793,  829,  807,  259,  830,  831,  831,  832,  793,
      793,  793,  833,  793,  839,  840,  793,  793,  793,  793,

      793,  793,  793,  841,  834,  793,  793,  793,  842,  793,
      793,  793,  843,  793,  844,  845,  846,  793,  793,  847,
      793,  793,  848,  838,  793,  849,  793,  793,  793,  850,
      793,  259,  259,  259,  146,  146,  146,  146,  259,  259,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      807,  793,  793,  793,  851,  840,  840,  840,  840,  793,
      793,  793,  793,  852,  841,  841,  841,  853,  842,  842,
      842,  854,  843,  843,  843,  793,  855,  856,  793,  857,
      847,  847,  847,  858,  848,  848,  848,  793,  849,  849,
      849,  849,  793,  859,  850,  850,  850,  850,  793,  146,

      146,  146,  146,  259,  259,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  807,  793,  793,  793,
      851,  860,  840,  793,  840,  852,  852,  852,  852,  841,
      853,  853,  853,  853,  842,  854,  854,  854,  854,  843,
      861,  862,  857,  857,  857,  857,  847,  858,  858,  858,
      858,  848,  793,  793,  849,  849,  793,  859,  859,  859,
      859,  859,  850,  850,  793,  146,  146,  146,  146,  259,
      259,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  807,  793,  793,  793,  860,  488,  488,
      488,  488,  863,  852,  853,  854,  864,  793,  857,  858,

      793,  849,  793,  859,  859,  850,  793,  146,  259,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  807,  793,
      793,  488,  488,  488,  488,  863,  865,  793,  849,  793,
      859,  850,  793,  146,  793,  793,  793,  793,  793,  539,
      807,  807,  807,  807,  793,  793,  866,  793,  793,  793,
      849,  793,  859,  850,  793,  259,  793,  259,  259,  793,
      793,  793,  793,  793,  793,  807,  807,  807,  807,  807,
      807,  793,  546,  862,  793,  793,  793,  849,  793,  867,
      793,  859,  850,  793,  868,  793,  259,  793,  793,  793,
      793,  807,  807,  807,  807,  807,  807,  807,  807,  793,

      793,  793,  793,  793,  849,  793,  869,  859,  850,  793,
      870,  259,  793,  793,  793,  793,  807,  807,  807,  807,
      807,  807,  807,  807,  793,  793,  793,  793,  793,  849,
      793,  871,  849,  793,  869,  869,  872,  869,  859,  850,
      793,  873,  850,  793,  870,  870,  874,  870,  259,  793,
      793,  793,  793,  807,  793,  793,  793,  807,  807,  807,
      807,  807,  793,  793,  793,  793,  849,  849,  793,  849,
      849,  875,  869,  869,  793,  869,  869,  859,  793,  876,
      859,  868,  793,  850,  850,  793,  850,  850,  877,  870,
      870,  793,  870,  870,  259,  793,  793,  793,  793,  807,

      793,  793,  793,  807,  807,  793,  793,  875,  849,  875,
      875,  878,  875,  875,  872,  867,  859,  859,  793,  859,
      859,  879,  879,  850,  793,  877,  877,  880,  877,  877,
      874,  868,  259,  793,  259,  793,  793,  793,  793,  793,
      807,  875,  875,  875,  793,  875,  875,  875,  875,  859,
      879,  879,  881,  879,  879,  879,  877,  877,  877,  793,
      877,  877,  877,  877,  793,  793,  878,  875,  879,  879,
      793,  879,  879,  879,  879,  880,  868,  877,  875,  881,
      879,  877,  875,  879,  877,  875,  879,  877,  875,  879,
      877,  879,    0,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793
    } ;

static yyconst flex_int16_t yy_nxt[5042] =
    {   0,
       45,   46,   47,   46,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   64,   65,   66,   67,   68,   69,   45,   70,   70,
       70,   70,   71,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   72,   45,   73,
       45,   70,   70,   70,   70,   74,   75,   76,   70,   77,
       78,   79,   78,   80,   81,   82,   83,   84,   80,   85,
       86,   86,   84,   84,   86,   87,   88,   89,   90,   90,
       90,   91,   86,   84,   84,   84,   80,   92,   93,   92,
       92,   94,   92,   92,   92,   92,   92,   95,   92,   92,

       92,   92,   92,   92,   96,   97,   86,   77,   86,   84,
       92,   92,   96,   97,   77,   80,   77,   92,   99,  765,
      156,  147,   99,  103,  103,  103,  103,  103,  103,  132,
      132,  157,  314,  314,  133,  133,  100,  101,  148,  100,
      100,  101,  264,  100,  192,  104,  265,  193,  104,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  105,  105,  105,  105,

      106,  106,  106,  106,  105,  105,  105,  106,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  107,  107,  107,  107,  108,
      108,  108,  108,  107,  107,  107,  108,  112,  118,  112,
      129,  112,  112,  118,  129,  123,  113,  112,  174,  112,
      741,  114,  158,  124,  221,  123,  174,  112,  112,  112,
      112,  159,  160,  124,  738,  137,  138,  137,  143,  143,

      143,  139,  163,  144,  137,  138,  137,  164,  130,  251,
      139,  119,  130,  112,  165,  737,  119,  251,  216,  112,
      112,  125,  112,  217,  112,  112,  140,  221,  723,  113,
      112,  125,  112,  150,  114,  140,  250,  205,  205,  205,
      112,  112,  112,  112,  143,  143,  143,  149,  150,  144,
      161,  151,  708,  250,  147,  273,  162,  162,  162,  206,
      274,  152,  176,  176,  176,  297,  112,  177,  151,  152,
      298,  148,  112,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,

      134,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      134,  134,  134,  134,  135,  135,  135,  135,  134,  134,
      134,  135,  166,  216,  167,  167,  167,  166,  217,  167,
      167,  167,  182,  176,  176,  176,  707,  168,  177,  208,
      208,  208,  168,  264,  183,  183,  183,  265,  266,  180,
      186,  169,  187,  187,  187,  705,  212,  213,  213,  169,
      179,  210,  179,  267,  179,  179,  181,  268,  269,  179,
      179,  214,  179,  189,  179,  190,  190,  190,  376,  376,
      179,  179,  179,  179,  223,  224,  224,  704,  191,  232,

      232,  180,  227,  228,  228,  237,  238,  238,  271,  225,
      272,  229,  294,  295,  229,  267,  179,  230,  181,  268,
      239,  700,  179,  408,  699,  233,  240,  241,  241,  240,
      241,  241,  335,  234,  235,  229,  247,  247,  247,  336,
      408,  242,  697,  296,  242,  252,  252,  252,  569,  220,
      255,  256,  256,  570,  162,  162,  162,  339,  249,  229,
      253,  143,  143,  143,  340,  257,  144,  168,  280,  280,
      280,  166,  469,  167,  167,  167,  411,  281,  347,  281,
      469,  168,  282,  282,  282,  348,  168,  696,  473,  254,
      176,  176,  176,  411,  258,  177,  473,  254,  183,  183,

      183,  695,  258,  259,  259,  260,  261,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      259,  263,  259,  259,  259,  262,  262,  262,  259,  259,
      259,  259,  285,  665,  285,  481,  285,  285,  187,  187,
      187,  285,  285,  481,  285,  577,  285,  290,  290,  290,
      590,  191,  285,  285,  285,  285,  332,  333,  334,  189,
      191,  291,  291,  291,  292,  344,  292,  294,  295,  282,

      282,  282,  664,  345,  191,  280,  280,  280,  285,  205,
      205,  205,  344,  617,  285,  288,  491,  288,  168,  288,
      288,  208,  208,  208,  288,  288,  524,  288,  296,  288,
      617,  206,  208,  208,  208,  288,  288,  288,  288,  663,
      212,  213,  213,  210,  301,  301,  301,  223,  224,  224,
      282,  282,  282,  302,  210,  214,  306,  306,  306,  303,
      662,  288,  225,  660,  567,  307,  568,  288,  227,  228,
      228,  308,  310,  310,  310,  237,  238,  238,  247,  247,
      247,  311,  283,  230,  318,  318,  318,  312,  283,  575,
      239,  576,  659,  311,  240,  241,  241,  294,  295,  319,

      249,  321,  321,  321,  247,  247,  247,  294,  295,  242,
      311,  658,  252,  252,  252,  654,  322,  255,  256,  256,
      653,  328,  328,  328,  596,  652,  249,  253,  296,  644,
      311,  597,  257,  282,  282,  282,  329,  352,  296,  353,
      353,  353,  189,  603,  354,  354,  354,  282,  282,  282,
      604,  634,  191,  301,  301,  301,  254,  191,  418,  418,
      418,  258,  302,  629,  254,  258,  523,  524,  303,  258,
      416,  416,  416,  258,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  356,  356,  356,  649,  525,  259,  259,

      259,  285,  620,  285,  649,  285,  285,  628,  358,  626,
      285,  285,  417,  285,  625,  285,  360,  360,  360,  620,
      627,  285,  285,  285,  285,  593,  362,  362,  362,  366,
      213,  213,  650,  594,  306,  306,  306,  627,  361,  315,
      650,  359,  593,  307,  367,  315,  624,  285,  363,  308,
      370,  224,  224,  285,  288,  651,  288,  623,  288,  288,
      360,  360,  360,  288,  288,  371,  288,  316,  288,  310,
      310,  310,  651,  316,  288,  288,  288,  288,  311,  374,
      228,  228,  361,  622,  312,  600,  318,  318,  318,  382,
      238,  238,  621,  601,  375,  311,  321,  321,  321,  619,

      288,  319,  600,  618,  383,  311,  288,  386,  241,  241,
      616,  322,  390,  252,  252,  328,  328,  328,  396,  256,
      256,  661,  387,  698,  311,  355,  355,  391,  615,  661,
      329,  698,  352,  397,  419,  419,  419,  420,  614,  354,
      354,  354,  356,  356,  356,  317,  613,  191,  356,  356,
      356,  317,  191,  356,  356,  356,  392,  358,  612,  258,
      377,  611,  398,  358,  392,  607,  377,  258,  422,  602,
      398,  356,  356,  356,  599,  362,  362,  362,  598,  427,
      301,  301,  595,  366,  213,  213,  423,  424,  428,  378,
      359,  366,  213,  213,  429,  378,  359,  363,  367,  592,

      591,  359,  589,  366,  213,  213,  367,  432,  306,  306,
      370,  224,  224,  370,  224,  224,  433,  425,  430,  359,
      379,  441,  434,  588,  587,  371,  379,  441,  371,  370,
      224,  224,  437,  310,  310,  374,  228,  228,  374,  228,
      228,  438,  442,  497,  435,  498,  527,  439,  442,  497,
      375,  498,  527,  375,  374,  228,  228,  444,  318,  318,
      382,  238,  238,  382,  238,  238,  445,  547,  574,  440,
      577,  571,  446,  547,  574,  383,  566,  555,  383,  382,
      238,  238,  449,  321,  321,  386,  241,  241,  386,  241,
      241,  450,  552,  491,  447,  485,  539,  451,  538,  535,

      387,  534,  533,  387,  386,  241,  241,  453,  453,  453,
      390,  252,  252,  390,  252,  252,  390,  252,  252,  452,
      390,  252,  252,  530,  528,  391,  491,  519,  391,  518,
      516,  455,  459,  328,  328,  391,  515,  396,  256,  256,
      511,  460,  246,  396,  256,  256,  510,  461,  509,  454,
      470,  456,  397,  508,  392,  246,  246,  392,  397,  466,
      392,  466,  392,  507,  392,  392,  503,  501,  392,  475,
      475,  475,  392,  396,  256,  256,  462,  396,  256,  256,
      484,  398,  482,  480,  462,  479,  478,  398,  463,  398,
      474,  472,  397,  471,  470,  398,  476,  476,  476,  416,

      416,  416,  485,  468,  486,  486,  486,  352,  464,  487,
      487,  487,  467,  487,  487,  487,  466,  398,  477,  465,
      457,  398,  191,  415,  414,  398,  191,  413,  412,  398,
      475,  475,  475,  410,  356,  356,  356,  409,  356,  356,
      356,  483,  488,  489,  356,  356,  488,  488,  488,  422,
      407,  488,  488,  358,  514,  514,  514,  488,  491,  424,
      406,  427,  301,  301,  488,  488,  488,  488,  405,  488,
      428,  404,  427,  301,  301,  403,  429,  402,  366,  213,
      213,  428,  359,  476,  476,  476,  359,  429,  401,  400,
      488,  492,  488,  430,  427,  301,  301,  488,  488,  488,

      356,  356,  356,  428,  399,  477,  357,  357,  394,  429,
      357,  357,  357,  357,  393,  358,  357,  357,  357,  357,
      357,  388,  453,  453,  453,  357,  245,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  357,  384,  359,  380,
      493,  493,  493,  493,  427,  301,  301,  493,  432,  306,
      306,  372,  368,  428,  454,  364,  295,  433,  182,  494,
      432,  306,  306,  434,  432,  306,  306,  351,  279,  433,
      517,  517,  517,  433,  350,  434,  432,  306,  306,  434,
      370,  224,  224,  349,  346,  433,  343,  437,  310,  310,

      342,  495,  437,  310,  310,  435,  438,  437,  310,  310,
      341,  438,  439,  374,  228,  228,  438,  439,  437,  310,
      310,  338,  439,  444,  318,  318,  337,  438,  440,  520,
      520,  520,  445,  496,  444,  318,  318,  331,  446,  444,
      318,  318,  330,  445,  444,  318,  318,  327,  445,  446,
      382,  238,  238,  445,  446,  449,  321,  321,  326,  499,
      449,  321,  321,  325,  450,  447,  386,  241,  241,  450,
      451,  449,  321,  321,  273,  451,  449,  321,  321,  245,
      450,  452,  390,  252,  252,  450,  451,  390,  252,  252,
      323,  500,  459,  328,  328,  320,  313,  455,  512,  512,

      512,  460,  391,  459,  328,  328,  309,  461,  459,  328,
      328,  304,  460,  459,  328,  328,  300,  460,  461,  299,
      513,  202,  460,  461,  182,  284,  392,  279,  504,  502,
      276,  392,  275,  270,  392,  245,  462,  243,  220,  392,
      218,  459,  328,  328,  462,  202,  200,  462,  199,  198,
      460,  197,  462,  196,  188,  462,  461,  462,  185,  175,
      462,  396,  256,  256,  172,  462,  396,  256,  256,  171,
      170,  485,  505,  521,  521,  521,  463,  487,  487,  487,
      155,  397,  427,  301,  301,  462,  432,  306,  306,  154,
      191,  428,  153,  462,  145,  433,  793,  494,  536,  536,

      536,  495,  437,  310,  310,  398,  142,  142,  506,  141,
      398,  438,  141,  398,  512,  512,  512,  496,  398,  488,
      489,  356,  356,  488,  488,  488,  128,  128,  488,  488,
      444,  318,  318,  127,  488,  522,  513,  127,  121,  445,
      121,  488,  488,  488,  488,  499,  488,  449,  321,  321,
      116,  390,  252,  252,  116,  110,  450,  514,  514,  514,
      110,  793,  500,  537,  537,  537,  391,  488,  492,  488,
      517,  517,  517,  793,  488,  488,  488,  356,  356,  356,
      529,  545,  545,  545,  357,  793,  793,  357,  357,  357,
      357,  793,  423,  424,  357,  392,  459,  328,  328,  459,

      328,  328,  357,  392,  793,  460,  793,  793,  460,  793,
      793,  504,  793,  793,  461,  396,  256,  256,  793,  390,
      252,  252,  793,  425,  793,  359,  548,  548,  548,  793,
      397,  556,  557,  558,  391,  560,  560,  560,  793,  793,
      462,  531,  793,  462,  532,  793,  551,  793,  462,  793,
      793,  462,  536,  536,  536,  793,  793,  549,  793,  398,
      550,  793,  793,  392,  459,  328,  328,  398,  540,  540,
      540,  392,  793,  460,  537,  537,  537,  550,  793,  461,
      793,  559,  562,  562,  562,  561,  572,  572,  572,  556,
      557,  558,  793,  553,  560,  560,  560,  793,  541,  542,

      793,  793,  543,  556,  557,  558,  793,  793,  462,  548,
      548,  548,  544,  560,  560,  560,  462,  793,  793,  543,
      544,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      549,  793,  793,  550,  546,  546,  546,  546,  562,  562,
      562,  546,  356,  356,  356,  396,  256,  256,  793,  357,
      550,  793,  357,  357,  357,  357,  793,  423,  424,  357,
      397,  793,  390,  252,  252,  793,  793,  357,  793,  579,
      579,  579,  554,  655,  655,  655,  793,  391,  580,  655,
      655,  655,  793,  793,  581,  656,  656,  656,  425,  398,

      359,  793,  793,  459,  328,  328,  793,  398,  540,  540,
      540,  578,  460,  584,  584,  584,  392,  657,  461,  656,
      656,  656,  585,  793,  392,  579,  579,  579,  586,  793,
      582,  655,  655,  655,  580,  584,  584,  584,  563,  549,
      581,  657,  564,  793,  585,  793,  793,  462,  793,  793,
      586,  793,  565,  793,  793,  462,  703,  703,  703,  564,
      565,  488,  489,  356,  356,  488,  488,  488,  573,  490,
      488,  488,  490,  490,  490,  490,  488,  523,  524,  490,
      573,  573,  573,  488,  488,  488,  488,  490,  488,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  525,  488,
      492,  488,  573,  573,  573,  573,  488,  488,  488,  573,
      396,  256,  256,  390,  252,  252,  793,  459,  328,  328,
      396,  256,  256,  793,  793,  397,  460,  793,  391,  706,
      706,  706,  461,  793,  793,  397,  793,  630,  631,  631,
      793,  656,  656,  656,  605,  793,  632,  793,  793,  583,
      793,  609,  633,  793,  398,  793,  608,  392,  636,  579,
      579,  462,  398,  657,  398,  392,  793,  637,  793,  462,
      793,  793,  398,  638,  793,  459,  328,  328,  640,  641,
      641,  392,  793,  793,  460,  793,  793,  642,  793,  392,

      461,  793,  793,  643,  646,  584,  584,  793,  630,  631,
      631,  793,  793,  647,  793,  793,  639,  632,  793,  648,
      701,  701,  701,  633,  631,  631,  631,  793,  793,  462,
      793,  793,  398,  580,  668,  669,  669,  462,  793,  666,
      398,  793,  702,  389,  390,  252,  252,  793,  793,  670,
      793,  793,  392,  793,  636,  579,  579,  793,  793,  672,
      392,  793,  793,  637,  636,  579,  579,  793,  254,  638,
      703,  703,  703,  637,  793,  793,  254,  793,  671,  638,
      674,  675,  675,  636,  579,  579,  671,  793,  392,  637,
      793,  793,  637,  793,  793,  676,  392,  793,  677,  678,

      679,  679,  640,  641,  641,  733,  734,  735,  680,  793,
      793,  642,  793,  793,  681,  793,  793,  643,  679,  679,
      679,  685,  686,  686,  396,  256,  256,  682,  793,  793,
      395,  793,  793,  683,  793,  793,  687,  793,  793,  689,
      646,  584,  584,  462,  793,  793,  398,  793,  793,  647,
      793,  462,  793,  793,  398,  648,  793,  646,  584,  584,
      793,  793,  258,  793,  793,  688,  647,  793,  398,  793,
      258,  793,  648,  688,  793,  793,  398,  691,  692,  692,
      646,  584,  584,  701,  701,  701,  647,  793,  793,  647,
      793,  793,  693,  793,  793,  694,  793,  390,  252,  252,

      390,  252,  252,  793,  793,  702,  709,  793,  793,  709,
      793,  793,  391,  793,  793,  391,  252,  252,  252,  390,
      252,  252,  736,  736,  736,  634,  793,  793,  709,  793,
      793,  253,  793,  793,  455,  793,  390,  252,  252,  793,
      793,  392,  793,  793,  392,  709,  711,  631,  631,  392,
      793,  391,  392,  793,  793,  712,  793,  636,  579,  579,
      254,  713,  793,  392,  793,  793,  715,  456,  254,  793,
      793,  392,  638,  793,  636,  579,  579,  579,  579,  579,
      392,  793,  793,  715,  793,  793,  716,  793,  392,  638,
      714,  793,  581,  636,  579,  579,  793,  793,  714,  706,

      706,  706,  715,  636,  579,  579,  793,  793,  677,  739,
      739,  739,  637,  678,  679,  679,  793,  793,  677,  701,
      701,  701,  680,  679,  679,  679,  793,  793,  681,  703,
      703,  703,  682,  718,  719,  719,  793,  793,  683,  793,
      793,  702,  460,  459,  328,  328,  793,  793,  720,  740,
      740,  740,  460,  396,  256,  256,  793,  462,  722,  706,
      706,  706,  724,  793,  793,  462,  793,  258,  397,  396,
      256,  256,  740,  740,  740,  258,  793,  721,  724,  328,
      328,  328,  793,  793,  397,  721,  793,  462,  725,  396,
      256,  256,  793,  793,  329,  462,  793,  398,  724,  396,

      256,  256,  793,  793,  463,  398,  793,  793,  724,  727,
      641,  641,  793,  398,  397,  733,  734,  735,  728,  793,
      793,  398,  793,  258,  729,  646,  584,  584,  793,  793,
      464,  258,  793,  398,  731,  646,  584,  584,  793,  793,
      648,  398,  793,  398,  731,  584,  584,  584,  793,  793,
      648,  398,  793,  730,  732,  646,  584,  584,  793,  793,
      586,  730,  793,  793,  731,  646,  584,  584,  793,  793,
      694,  390,  252,  252,  647,  711,  631,  631,  793,  793,
      694,  736,  736,  736,  712,  793,  391,  711,  631,  631,
      742,  711,  631,  631,  793,  793,  712,  733,  734,  735,

      712,  793,  742,  744,  745,  745,  742,  711,  631,  631,
      793,  793,  712,  793,  793,  392,  712,  793,  746,  714,
      793,  793,  748,  392,  736,  736,  736,  714,  739,  739,
      739,  714,  739,  739,  739,  714,  740,  740,  740,  714,
      766,  766,  766,  714,  766,  766,  766,  747,  711,  631,
      631,  714,  674,  675,  675,  747,  793,  712,  793,  714,
      793,  637,  793,  742,  766,  766,  766,  676,  459,  328,
      328,  459,  328,  328,  793,  793,  793,  750,  793,  749,
      750,  793,  793,  461,  793,  793,  461,  328,  328,  328,
      793,  793,  714,  793,  793,  793,  725,  793,  793,  793,

      714,  793,  329,  793,  459,  328,  328,  459,  328,  328,
      793,  793,  462,  750,  793,  462,  750,  793,  793,  504,
      462,  793,  461,  462,  793,  752,  679,  679,  752,  679,
      679,  258,  793,  793,  753,  793,  793,  753,  505,  258,
      754,  793,  793,  756,  793,  396,  256,  256,  462,  793,
      793,  462,  727,  641,  641,  793,  462,  793,  793,  462,
      397,  728,  793,  793,  727,  641,  641,  757,  793,  755,
      793,  793,  755,  728,  793,  793,  793,  755,  793,  757,
      755,  793,  793,  759,  760,  760,  727,  641,  641,  398,
      793,  793,  728,  793,  793,  728,  730,  398,  761,  793,

      793,  763,  793,  793,  730,  727,  641,  641,  730,  691,
      692,  692,  793,  793,  728,  793,  730,  793,  647,  793,
      757,  793,  793,  793,  693,  793,  793,  762,  793,  793,
      730,  711,  631,  631,  793,  762,  764,  793,  730,  793,
      712,  711,  631,  631,  793,  793,  748,  793,  793,  730,
      767,  711,  631,  631,  793,  793,  742,  730,  793,  793,
      767,  631,  631,  631,  793,  793,  742,  793,  793,  793,
      716,  711,  631,  631,  793,  714,  666,  793,  793,  793,
      767,  793,  793,  714,  793,  714,  748,  711,  631,  631,
      793,  793,  793,  714,  793,  714,  767,  711,  631,  631,

      793,  793,  742,  714,  793,  254,  712,  459,  328,  328,
      793,  793,  748,  254,  793,  714,  460,  793,  749,  711,
      631,  631,  461,  714,  793,  793,  793,  793,  712,  793,
      793,  714,  793,  793,  742,  752,  679,  679,  793,  714,
      793,  714,  793,  793,  753,  752,  679,  679,  793,  714,
      756,  462,  793,  793,  753,  770,  771,  771,  793,  462,
      756,  768,  793,  714,  753,  752,  679,  679,  793,  793,
      772,  714,  793,  793,  753,  752,  679,  679,  793,  755,
      774,  793,  793,  793,  753,  793,  793,  755,  793,  755,
      756,  793,  793,  752,  679,  679,  793,  755,  793,  773,

      793,  793,  753,  727,  641,  641,  775,  773,  774,  755,
      793,  793,  728,  727,  641,  641,  793,  755,  763,  755,
      793,  793,  776,  727,  641,  641,  793,  755,  757,  793,
      793,  793,  776,  679,  679,  679,  793,  755,  757,  793,
      793,  793,  777,  793,  793,  755,  793,  730,  683,  727,
      641,  641,  793,  793,  793,  730,  793,  730,  776,  727,
      641,  641,  793,  793,  763,  730,  793,  730,  776,  727,
      641,  641,  793,  793,  757,  730,  793,  258,  728,  793,
      727,  641,  641,  793,  763,  258,  793,  793,  793,  728,
      764,  793,  793,  730,  793,  757,  793,  744,  745,  745,

      793,  730,  793,  730,  793,  793,  712,  793,  711,  631,
      631,  730,  746,  730,  793,  793,  793,  712,  752,  679,
      679,  730,  778,  742,  730,  793,  793,  780,  793,  752,
      679,  679,  730,  756,  793,  793,  793,  779,  780,  793,
      793,  747,  793,  793,  756,  793,  679,  679,  679,  747,
      793,  793,  714,  793,  793,  777,  752,  679,  679,  793,
      714,  683,  755,  793,  793,  780,  793,  793,  793,  793,
      755,  774,  793,  755,  752,  679,  679,  752,  679,  679,
      793,  755,  793,  780,  793,  793,  753,  793,  793,  756,
      258,  793,  774,  793,  752,  679,  679,  793,  258,  793,

      755,  793,  793,  753,  793,  775,  793,  793,  755,  756,
      759,  760,  760,  727,  641,  641,  793,  793,  755,  728,
      793,  755,  728,  793,  793,  761,  755,  793,  757,  755,
      793,  793,  711,  631,  631,  793,  781,  793,  755,  793,
      793,  712,  782,  770,  771,  771,  755,  742,  793,  793,
      793,  793,  753,  793,  762,  793,  793,  730,  772,  783,
      793,  793,  762,  793,  793,  730,  793,  793,  752,  679,
      679,  727,  641,  641,  793,  793,  714,  753,  793,  793,
      728,  793,  793,  756,  714,  793,  757,  773,  793,  793,
      711,  631,  631,  793,  793,  773,  793,  784,  785,  712,

      793,  752,  679,  679,  793,  742,  793,  793,  793,  793,
      753,  793,  755,  793,  793,  730,  756,  727,  641,  641,
      755,  793,  793,  730,  793,  793,  728,  793,  787,  786,
      793,  793,  757,  793,  714,  711,  631,  631,  793,  752,
      679,  679,  714,  793,  712,  755,  793,  793,  753,  793,
      742,  793,  793,  755,  756,  793,  788,  793,  727,  641,
      641,  730,  711,  631,  631,  793,  789,  728,  793,  730,
      793,  712,  793,  757,  793,  793,  793,  742,  790,  714,
      793,  793,  793,  755,  752,  679,  679,  714,  793,  791,
      793,  755,  793,  753,  727,  641,  641,  793,  793,  756,

      793,  793,  730,  728,  793,  793,  714,  793,  793,  757,
      730,  752,  679,  679,  714,  792,  793,  793,  793,  793,
      753,  793,  793,  793,  793,  793,  756,  793,  755,  793,
      793,  793,  793,  793,  793,  793,  755,  793,  730,  793,
      793,  793,  793,  793,  793,  793,  730,  793,  793,  793,
      793,  793,  793,  793,  793,  755,  793,  793,  793,  793,
      793,  793,  793,  755,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  173,  793,  793,
      793,  793,  793,  793,  173,  793,  793,  793,  793,  793,
      173,  173,  178,  793,  793,  178,  793,  793,  178,  178,
      793,  793,  793,  793,  178,  178,  178,  184,  793,  793,
      793,  793,  793,  793,  184,  793,  793,  793,  793,  793,
      184,  184,  194,  793,  793,  194,  793,  194,  194,  195,
      793,  793,  793,  793,  793,  793,  195,  793,  793,  793,

      793,  793,  195,  195,  201,  201,  201,  201,  793,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  793,
      201,  793,  201,  201,  201,  203,  203,  203,  203,  793,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  793,  204,  204,  204,  207,  793,  793,
      793,  793,  793,  793,  207,  793,  793,  793,  793,  793,
      207,  207,  209,  209,  793,  793,  209,  793,  793,  793,
      793,  793,  793,  209,  793,  209,  793,  793,  793,  209,

      209,  211,  211,  211,  211,  211,  211,  211,  793,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  793,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  219,  219,  219,  219,  793,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  222,  222,  222,  222,  222,  222,
      222,  793,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  226,  226,  226,  226,  226,
      226,  226,  793,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  236,  236,  236,  236,
      236,  236,  236,  793,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  244,  244,  244,
      244,  244,  793,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  248,  248,
      793,  793,  248,  793,  793,  793,  793,  793,  793,  248,
      793,  248,  793,  793,  793,  248,  248,  277,  793,  793,
      277,  793,  793,  277,  277,  793,  793,  793,  793,  277,

      277,  277,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  286,  793,  793,  793,  793,  793,  793,
      286,  793,  793,  793,  793,  793,  286,  286,  287,  287,
      793,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  289,
      793,  793,  289,  793,  793,  289,  289,  793,  793,  793,
      793,  289,  289,  289,  293,  793,  793,  793,  793,  293,
      293,  293,  793,  793,  793,  793,  793,  293,  293,  305,
      793,  793,  305,  793,  793,  305,  305,  793,  793,  793,

      793,  305,  305,  305,  324,  793,  793,  793,  793,  793,
      793,  324,  793,  793,  793,  793,  793,  324,  324,  357,
      357,  793,  793,  357,  357,  793,  357,  357,  357,  357,
      357,  793,  793,  793,  793,  357,  357,  357,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  421,  793,  793,  793,  793,
      421,  421,  421,  793,  793,  793,  793,  793,  421,  421,

      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  526,  526,  793,
      793,  526,  526,  793,  526,  526,  526,  526,  526,  793,
      793,  793,  793,  526,  526,  526,  606,  606,  606,  606,
      606,  606,  606,  793,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  610,  610,  610,
      610,  610,  610,  610,  793,  610,  610,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,   43,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793
    } ;

static yyconst flex_int16_t yy_chk[5042] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,  738,
       58,   50,    8,    9,    9,    9,   10,   10,   10,   33,
       34,   58,  232,  232,   33,   34,    7,    7,   50,    7,
        8,    8,  180,    8,   91,    9,  180,   91,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   17,   21,   17,
       31,   17,   17,   22,   32,   25,   17,   17,   71,   17,
      705,   17,   60,   25,  119,   26,   71,   17,   17,   17,
       17,   60,   60,   26,  698,   37,   37,   37,   46,   46,

       46,   37,   62,   46,   38,   38,   38,   62,   31,  140,
       38,   21,   32,   17,   62,  697,   22,  140,  113,   17,
       18,   25,   18,  113,   18,   18,   37,  119,  683,   18,
       18,   26,   18,  139,   18,   38,  139,  103,  103,  103,
       18,   18,   18,   18,   47,   47,   47,   51,   51,   47,
       61,   51,  666,  139,  144,  151,   61,   61,   61,  103,
      151,   51,   78,   78,   78,  199,   18,   78,   51,   51,
      199,  144,   18,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   63,  216,   63,   63,   63,   64,  216,   64,
       64,   64,   83,   79,   79,   79,  665,   63,   79,  108,
      108,  108,   64,  147,   83,   83,   83,  147,  147,  177,
       88,   63,   88,   88,   88,  661,  110,  110,  110,   63,
       82,  108,   82,  148,   82,   82,  177,  148,  148,   82,
       82,  110,   82,   90,   82,   90,   90,   90,  314,  314,
       82,   82,   82,   82,  121,  121,  121,  660,   90,  125,

      125,   82,  124,  124,  124,  127,  127,  127,  150,  121,
      150,  124,  194,  194,  127,  181,   82,  124,   82,  181,
      127,  654,   82,  343,  653,  125,  128,  128,  128,  129,
      129,  129,  264,  125,  125,  128,  135,  135,  135,  264,
      343,  128,  651,  194,  129,  141,  141,  141,  543,  141,
      142,  142,  142,  543,  162,  162,  162,  267,  135,  142,
      141,  143,  143,  143,  267,  142,  143,  162,  166,  166,
      166,  167,  403,  167,  167,  167,  346,  168,  273,  168,
      403,  166,  168,  168,  168,  273,  167,  650,  407,  141,
      176,  176,  176,  346,  142,  176,  407,  141,  183,  183,

      183,  649,  142,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  179,  629,  179,  414,  179,  179,  187,  187,
      187,  179,  179,  414,  179,  564,  179,  189,  189,  189,
      564,  187,  179,  179,  179,  179,  263,  263,  263,  190,
      189,  190,  190,  190,  191,  271,  191,  293,  293,  191,

      191,  191,  628,  271,  190,  280,  280,  280,  179,  205,
      205,  205,  271,  592,  179,  185,  523,  185,  280,  185,
      185,  208,  208,  208,  185,  185,  523,  185,  293,  185,
      592,  205,  209,  209,  209,  185,  185,  185,  185,  627,
      212,  212,  212,  208,  213,  213,  213,  223,  223,  223,
      281,  281,  281,  213,  209,  212,  224,  224,  224,  213,
      624,  185,  223,  622,  542,  224,  542,  185,  227,  227,
      227,  224,  228,  228,  228,  237,  237,  237,  247,  247,
      247,  228,  829,  227,  238,  238,  238,  228,  829,  549,
      237,  549,  621,  238,  240,  240,  240,  355,  355,  238,

      247,  241,  241,  241,  248,  248,  248,  421,  421,  240,
      241,  620,  252,  252,  252,  617,  241,  255,  255,  255,
      616,  256,  256,  256,  569,  615,  248,  252,  355,  610,
      256,  569,  255,  282,  282,  282,  256,  290,  421,  290,
      290,  290,  291,  577,  291,  291,  291,  292,  292,  292,
      577,  606,  290,  301,  301,  301,  252,  291,  352,  352,
      352,  255,  301,  604,  252,  256,  492,  492,  301,  255,
      351,  351,  351,  256,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  296,  296,  296,  612,  492,  259,  259,

      259,  285,  595,  285,  612,  285,  285,  603,  296,  601,
      285,  285,  351,  285,  600,  285,  299,  299,  299,  595,
      602,  285,  285,  285,  285,  567,  300,  300,  300,  304,
      304,  304,  613,  567,  306,  306,  306,  602,  299,  835,
      613,  296,  567,  306,  304,  835,  599,  285,  300,  306,
      309,  309,  309,  285,  288,  614,  288,  598,  288,  288,
      360,  360,  360,  288,  288,  309,  288,  836,  288,  310,
      310,  310,  614,  836,  288,  288,  288,  288,  310,  313,
      313,  313,  360,  597,  310,  575,  318,  318,  318,  320,
      320,  320,  596,  575,  313,  318,  321,  321,  321,  594,

      288,  318,  575,  593,  320,  321,  288,  323,  323,  323,
      591,  321,  326,  326,  326,  328,  328,  328,  330,  330,
      330,  623,  323,  652,  328,  839,  839,  326,  590,  623,
      328,  652,  353,  330,  353,  353,  353,  354,  589,  354,
      354,  354,  356,  356,  356,  837,  588,  353,  357,  357,
      357,  837,  354,  358,  358,  358,  326,  356,  587,  328,
      844,  586,  330,  357,  326,  581,  844,  328,  358,  576,
      330,  359,  359,  359,  571,  362,  362,  362,  570,  364,
      364,  364,  568,  365,  365,  365,  359,  359,  364,  845,
      356,  366,  366,  366,  364,  845,  357,  362,  365,  566,

      565,  358,  563,  367,  367,  367,  366,  368,  368,  368,
      369,  369,  369,  370,  370,  370,  368,  359,  367,  359,
      846,  855,  368,  561,  559,  369,  846,  855,  370,  371,
      371,  371,  372,  372,  372,  373,  373,  373,  374,  374,
      374,  372,  856,  861,  371,  862,  864,  372,  856,  861,
      373,  862,  864,  374,  375,  375,  375,  380,  380,  380,
      381,  381,  381,  382,  382,  382,  380,  865,  866,  375,
      550,  544,  380,  865,  866,  381,  541,  533,  382,  383,
      383,  383,  384,  384,  384,  385,  385,  385,  386,  386,
      386,  384,  530,  522,  383,  521,  518,  384,  516,  510,

      385,  508,  507,  386,  387,  387,  387,  388,  388,  388,
      389,  389,  389,  390,  390,  390,  391,  391,  391,  387,
      392,  392,  392,  503,  501,  389,  491,  484,  390,  483,
      481,  391,  394,  394,  394,  392,  480,  395,  395,  395,
      474,  394,  825,  396,  396,  396,  473,  394,  472,  388,
      471,  392,  395,  469,  389,  825,  825,  390,  396,  468,
      391,  467,  389,  465,  392,  390,  457,  454,  391,  409,
      409,  409,  392,  397,  397,  397,  394,  398,  398,  398,
      417,  395,  415,  413,  394,  412,  411,  396,  397,  395,
      408,  406,  398,  405,  404,  396,  410,  410,  410,  416,

      416,  416,  418,  402,  418,  418,  418,  419,  398,  419,
      419,  419,  401,  420,  420,  420,  400,  397,  410,  399,
      393,  398,  419,  350,  349,  397,  420,  348,  347,  398,
      475,  475,  475,  345,  423,  423,  423,  344,  425,  425,
      425,  416,  422,  422,  422,  422,  422,  422,  422,  423,
      342,  422,  422,  425,  479,  479,  479,  422,  422,  423,
      341,  426,  426,  426,  422,  422,  422,  422,  340,  422,
      426,  339,  427,  427,  427,  338,  426,  337,  430,  430,
      430,  427,  423,  476,  476,  476,  425,  427,  336,  335,
      422,  422,  422,  430,  428,  428,  428,  422,  422,  422,

      424,  424,  424,  428,  331,  476,  424,  424,  329,  428,
      424,  424,  424,  424,  327,  424,  424,  424,  424,  424,
      424,  325,  453,  453,  453,  424,  324,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  322,  424,  319,
      424,  424,  424,  424,  429,  429,  429,  424,  431,  431,
      431,  312,  308,  429,  453,  303,  294,  431,  286,  429,
      432,  432,  432,  431,  433,  433,  433,  284,  278,  432,
      482,  482,  482,  433,  275,  432,  434,  434,  434,  433,
      435,  435,  435,  274,  272,  434,  270,  436,  436,  436,

      269,  434,  437,  437,  437,  435,  436,  438,  438,  438,
      268,  437,  436,  440,  440,  440,  438,  437,  439,  439,
      439,  266,  438,  443,  443,  443,  265,  439,  440,  485,
      485,  485,  443,  439,  444,  444,  444,  258,  443,  445,
      445,  445,  257,  444,  446,  446,  446,  254,  445,  444,
      447,  447,  447,  446,  445,  448,  448,  448,  253,  446,
      449,  449,  449,  251,  448,  447,  452,  452,  452,  449,
      448,  450,  450,  450,  250,  449,  451,  451,  451,  246,
      450,  452,  455,  455,  455,  451,  450,  456,  456,  456,
      242,  451,  458,  458,  458,  239,  230,  455,  478,  478,

      478,  458,  456,  459,  459,  459,  225,  458,  460,  460,
      460,  214,  459,  461,  461,  461,  204,  460,  459,  203,
      478,  201,  461,  460,  184,  174,  455,  164,  461,  456,
      160,  456,  152,  149,  455,  133,  458,  130,  116,  456,
      114,  462,  462,  462,  458,   98,   97,  459,   96,   95,
      462,   94,  460,   93,   89,  459,  462,  461,   87,   75,
      460,  463,  463,  463,   69,  461,  464,  464,  464,   68,
       67,  486,  462,  486,  486,  486,  463,  487,  487,  487,
       57,  464,  494,  494,  494,  462,  495,  495,  495,   53,
      487,  494,   52,  462,   48,  495,   43,  494,  511,  511,

      511,  495,  496,  496,  496,  463,   42,   41,  464,   40,
      464,  496,   39,  463,  512,  512,  512,  496,  464,  488,
      488,  488,  488,  488,  488,  488,   30,   29,  488,  488,
      499,  499,  499,   28,  488,  488,  512,   27,   24,  499,
       23,  488,  488,  488,  488,  499,  488,  500,  500,  500,
       20,  502,  502,  502,   19,   16,  500,  514,  514,  514,
       15,    0,  500,  515,  515,  515,  502,  488,  488,  488,
      517,  517,  517,    0,  488,  488,  488,  493,  493,  493,
      502,  520,  520,  520,  493,    0,    0,  493,  493,  493,
      493,    0,  493,  493,  493,  502,  504,  504,  504,  505,

      505,  505,  493,  502,    0,  504,    0,    0,  505,    0,
        0,  504,    0,    0,  505,  506,  506,  506,    0,  529,
      529,  529,    0,  493,    0,  493,  528,  528,  528,    0,
      506,  534,  534,  534,  529,  535,  535,  535,    0,    0,
      504,  505,    0,  505,  506,    0,  529,    0,  504,    0,
        0,  505,  536,  536,  536,    0,    0,  528,    0,  506,
      528,    0,    0,  529,  531,  531,  531,  506,  519,  519,
      519,  529,    0,  531,  537,  537,  537,  528,    0,  531,
        0,  534,  538,  538,  538,  535,  545,  545,  545,  556,
      556,  556,    0,  531,  557,  557,  557,    0,  519,  519,

        0,    0,  519,  558,  558,  558,    0,    0,  531,  548,
      548,  548,  519,  560,  560,  560,  531,    0,    0,  519,
      519,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      548,    0,    0,  548,  524,  524,  524,  524,  562,  562,
      562,  524,  526,  526,  526,  532,  532,  532,    0,  526,
      548,    0,  526,  526,  526,  526,    0,  526,  526,  526,
      532,    0,  551,  551,  551,    0,    0,  526,    0,  552,
      552,  552,  532,  618,  618,  618,    0,  551,  552,  625,
      625,  625,    0,    0,  552,  619,  619,  619,  526,  532,

      526,    0,    0,  553,  553,  553,    0,  532,  539,  539,
      539,  551,  553,  555,  555,  555,  551,  619,  553,  626,
      626,  626,  555,    0,  551,  579,  579,  579,  555,    0,
      553,  655,  655,  655,  579,  584,  584,  584,  539,  539,
      579,  626,  539,    0,  584,    0,    0,  553,    0,    0,
      584,    0,  539,    0,    0,  553,  659,  659,  659,  539,
      539,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      554,  554,  554,  578,  578,  578,    0,  582,  582,  582,
      583,  583,  583,    0,    0,  554,  582,    0,  578,  662,
      662,  662,  582,    0,    0,  583,    0,  605,  605,  605,
        0,  656,  656,  656,  578,    0,  605,    0,    0,  554,
        0,  583,  605,    0,  554,    0,  582,  578,  607,  607,
      607,  582,  554,  656,  583,  578,    0,  607,    0,  582,
        0,    0,  583,  607,    0,  608,  608,  608,  609,  609,
      609,  605,    0,    0,  608,    0,    0,  609,    0,  605,

      608,    0,    0,  609,  611,  611,  611,    0,  630,  630,
      630,    0,    0,  611,    0,    0,  608,  630,    0,  611,
      658,  658,  658,  630,  631,  631,  631,    0,    0,  608,
        0,    0,  609,  631,  632,  632,  632,  608,    0,  631,
      609,    0,  658,  632,  633,  633,  633,    0,    0,  632,
        0,    0,  630,    0,  635,  635,  635,    0,    0,  633,
      630,    0,    0,  635,  636,  636,  636,    0,  631,  635,
      664,  664,  664,  636,    0,    0,  631,    0,  632,  636,
      637,  637,  637,  638,  638,  638,  632,    0,  633,  637,
        0,    0,  638,    0,    0,  637,  633,    0,  638,  639,

      639,  639,  640,  640,  640,  695,  695,  695,  639,    0,
        0,  640,    0,    0,  639,    0,    0,  640,  641,  641,
      641,  642,  642,  642,  643,  643,  643,  641,    0,    0,
      642,    0,    0,  641,    0,    0,  642,    0,    0,  643,
      645,  645,  645,  639,    0,    0,  640,    0,    0,  645,
        0,  639,    0,    0,  640,  645,    0,  646,  646,  646,
        0,    0,  641,    0,    0,  642,  646,    0,  643,    0,
      641,    0,  646,  642,    0,    0,  643,  647,  647,  647,
      648,  648,  648,  663,  663,  663,  647,    0,    0,  648,
        0,    0,  647,    0,    0,  648,    0,  667,  667,  667,

      668,  668,  668,    0,    0,  663,  667,    0,    0,  668,
        0,    0,  667,    0,    0,  668,  669,  669,  669,  670,
      670,  670,  696,  696,  696,  669,    0,    0,  670,    0,
        0,  669,    0,    0,  670,    0,  671,  671,  671,    0,
        0,  667,    0,    0,  668,  671,  672,  672,  672,  667,
        0,  671,  668,    0,    0,  672,    0,  673,  673,  673,
      669,  672,    0,  670,    0,    0,  673,  671,  669,    0,
        0,  670,  673,    0,  674,  674,  674,  675,  675,  675,
      671,    0,    0,  674,    0,    0,  675,    0,  671,  674,
      672,    0,  675,  676,  676,  676,    0,    0,  672,  699,

      699,  699,  676,  677,  677,  677,    0,    0,  676,  700,
      700,  700,  677,  678,  678,  678,    0,    0,  677,  701,
      701,  701,  678,  679,  679,  679,    0,    0,  678,  703,
      703,  703,  679,  680,  680,  680,    0,    0,  679,    0,
        0,  701,  680,  681,  681,  681,    0,    0,  680,  704,
      704,  704,  681,  684,  684,  684,    0,  678,  681,  706,
      706,  706,  684,    0,    0,  678,    0,  679,  684,  685,
      685,  685,  707,  707,  707,  679,    0,  680,  685,  686,
      686,  686,    0,    0,  685,  680,    0,  681,  686,  687,
      687,  687,    0,    0,  686,  681,    0,  684,  687,  688,

      688,  688,    0,    0,  687,  684,    0,    0,  688,  689,
      689,  689,    0,  685,  688,  733,  733,  733,  689,    0,
        0,  685,    0,  686,  689,  690,  690,  690,    0,    0,
      688,  686,    0,  687,  690,  691,  691,  691,    0,    0,
      690,  687,    0,  688,  691,  692,  692,  692,    0,    0,
      691,  688,    0,  689,  692,  693,  693,  693,    0,    0,
      692,  689,    0,    0,  693,  694,  694,  694,    0,    0,
      693,  709,  709,  709,  694,  708,  708,  708,    0,    0,
      694,  734,  734,  734,  708,    0,  709,  710,  710,  710,
      708,  711,  711,  711,    0,    0,  710,  735,  735,  735,

      711,    0,  710,  712,  712,  712,  711,  713,  713,  713,
        0,    0,  712,    0,    0,  709,  713,    0,  712,  708,
        0,    0,  713,  709,  736,  736,  736,  708,  737,  737,
      737,  710,  739,  739,  739,  711,  740,  740,  740,  710,
      741,  741,  741,  711,  765,  765,  765,  712,  714,  714,
      714,  713,  715,  715,  715,  712,    0,  714,    0,  713,
        0,  715,    0,  714,  766,  766,  766,  715,  717,  717,
      717,  718,  718,  718,    0,    0,    0,  717,    0,  714,
      718,    0,    0,  717,    0,    0,  718,  719,  719,  719,
        0,    0,  714,    0,    0,    0,  719,    0,    0,    0,

      714,    0,  719,    0,  720,  720,  720,  721,  721,  721,
        0,    0,  717,  720,    0,  718,  721,    0,    0,  720,
      717,    0,  721,  718,    0,  722,  722,  722,  723,  723,
      723,  719,    0,    0,  722,    0,    0,  723,  721,  719,
      722,    0,    0,  723,    0,  724,  724,  724,  720,    0,
        0,  721,  726,  726,  726,    0,  720,    0,    0,  721,
      724,  726,    0,    0,  727,  727,  727,  726,    0,  722,
        0,    0,  723,  727,    0,    0,    0,  722,    0,  727,
      723,    0,    0,  728,  728,  728,  729,  729,  729,  724,
        0,    0,  728,    0,    0,  729,  726,  724,  728,    0,

        0,  729,    0,    0,  726,  730,  730,  730,  727,  731,
      731,  731,    0,    0,  730,    0,  727,    0,  731,    0,
      730,    0,    0,    0,  731,    0,    0,  728,    0,    0,
      729,  742,  742,  742,    0,  728,  730,    0,  729,    0,
      742,  743,  743,  743,    0,    0,  742,    0,    0,  730,
      743,  744,  744,  744,    0,    0,  743,  730,    0,    0,
      744,  745,  745,  745,    0,    0,  744,    0,    0,    0,
      745,  746,  746,  746,    0,  742,  745,    0,    0,    0,
      746,    0,    0,  742,    0,  743,  746,  747,  747,  747,
        0,    0,    0,  743,    0,  744,  747,  748,  748,  748,

        0,    0,  747,  744,    0,  745,  748,  750,  750,  750,
        0,    0,  748,  745,    0,  746,  750,    0,  747,  749,
      749,  749,  750,  746,    0,    0,    0,    0,  749,    0,
        0,  747,    0,    0,  749,  751,  751,  751,    0,  747,
        0,  748,    0,    0,  751,  752,  752,  752,    0,  748,
      751,  750,    0,    0,  752,  753,  753,  753,    0,  750,
      752,  749,    0,  749,  753,  754,  754,  754,    0,    0,
      753,  749,    0,    0,  754,  755,  755,  755,    0,  751,
      754,    0,    0,    0,  755,    0,    0,  751,    0,  752,
      755,    0,    0,  756,  756,  756,    0,  752,    0,  753,

        0,    0,  756,  757,  757,  757,  755,  753,  756,  754,
        0,    0,  757,  758,  758,  758,    0,  754,  757,  755,
        0,    0,  758,  759,  759,  759,    0,  755,  758,    0,
        0,    0,  759,  760,  760,  760,    0,  756,  759,    0,
        0,    0,  760,    0,    0,  756,    0,  757,  760,  761,
      761,  761,    0,    0,    0,  757,    0,  758,  761,  762,
      762,  762,    0,    0,  761,  758,    0,  759,  762,  763,
      763,  763,    0,    0,  762,  759,    0,  760,  763,    0,
      764,  764,  764,    0,  763,  760,    0,    0,    0,  764,
      762,    0,    0,  761,    0,  764,    0,  767,  767,  767,

        0,  761,    0,  762,    0,    0,  767,    0,  768,  768,
      768,  762,  767,  763,    0,    0,    0,  768,  769,  769,
      769,  763,  764,  768,  764,    0,    0,  769,    0,  770,
      770,  770,  764,  769,    0,    0,    0,  768,  770,    0,
        0,  767,    0,    0,  770,    0,  771,  771,  771,  767,
        0,    0,  768,    0,    0,  771,  772,  772,  772,    0,
      768,  771,  769,    0,    0,  772,    0,    0,    0,    0,
      769,  772,    0,  770,  773,  773,  773,  774,  774,  774,
        0,  770,    0,  773,    0,    0,  774,    0,    0,  773,
      771,    0,  774,    0,  775,  775,  775,    0,  771,    0,

      772,    0,    0,  775,    0,  773,    0,    0,  772,  775,
      776,  776,  776,  778,  778,  778,    0,    0,  773,  776,
        0,  774,  778,    0,    0,  776,  773,    0,  778,  774,
        0,    0,  779,  779,  779,    0,  775,    0,  775,    0,
        0,  779,  778,  780,  780,  780,  775,  779,    0,    0,
        0,    0,  780,    0,  776,    0,    0,  778,  780,  779,
        0,    0,  776,    0,    0,  778,    0,    0,  781,  781,
      781,  782,  782,  782,    0,    0,  779,  781,    0,    0,
      782,    0,    0,  781,  779,    0,  782,  780,    0,    0,
      783,  783,  783,    0,    0,  780,    0,  781,  782,  783,

        0,  784,  784,  784,    0,  783,    0,    0,    0,    0,
      784,    0,  781,    0,    0,  782,  784,  785,  785,  785,
      781,    0,    0,  782,    0,    0,  785,    0,  784,  783,
        0,    0,  785,    0,  783,  786,  786,  786,    0,  787,
      787,  787,  783,    0,  786,  784,    0,    0,  787,    0,
      786,    0,    0,  784,  787,    0,  785,    0,  788,  788,
      788,  785,  789,  789,  789,    0,  786,  788,    0,  785,
        0,  789,    0,  788,    0,    0,    0,  789,  787,  786,
        0,    0,    0,  787,  790,  790,  790,  786,    0,  788,
        0,  787,    0,  790,  791,  791,  791,    0,    0,  790,

        0,    0,  788,  791,    0,    0,  789,    0,    0,  791,
      788,  792,  792,  792,  789,  790,    0,    0,    0,    0,
      792,    0,    0,    0,    0,    0,  792,    0,  790,    0,
        0,    0,    0,    0,    0,    0,  790,    0,  791,    0,
        0,    0,    0,    0,    0,    0,  791,    0,    0,    0,
        0,    0,    0,    0,    0,  792,    0,    0,    0,    0,
        0,    0,    0,  792,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,

      795,  795,  795,  795,  795,  795,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  805,  805,  805,  805,  805,

      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  807,    0,    0,
        0,    0,    0,    0,  807,    0,    0,    0,    0,    0,
      807,  807,  808,    0,    0,  808,    0,    0,  808,  808,
        0,    0,    0,    0,  808,  808,  808,  809,    0,    0,
        0,    0,    0,    0,  809,    0,    0,    0,    0,    0,
      809,  809,  810,    0,    0,  810,    0,  810,  810,  811,
        0,    0,    0,    0,    0,    0,  811,    0,    0,    0,

        0,    0,  811,  811,  812,  812,  812,  812,    0,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,    0,
      812,    0,  812,  812,  812,  813,  813,  813,  813,    0,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,    0,  814,  814,  814,  815,    0,    0,
        0,    0,    0,    0,  815,    0,    0,    0,    0,    0,
      815,  815,  816,  816,    0,    0,  816,    0,    0,    0,
        0,    0,    0,  816,    0,  816,    0,    0,    0,  816,

      816,  817,  817,  817,  817,  817,  817,  817,    0,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  818,  818,  818,  818,  818,  818,  818,  818,
      818,    0,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  819,  819,  819,  819,    0,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  820,  820,  820,  820,  820,  820,
      820,    0,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  821,  821,  821,  821,  821,
      821,  821,    0,  821,  821,  821,  821,  821,  821,  821,

      821,  821,  821,  821,  821,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  823,  823,  823,  823,
      823,  823,  823,    0,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  824,  824,  824,
      824,  824,    0,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  826,  826,
        0,    0,  826,    0,    0,    0,    0,    0,    0,  826,
        0,  826,    0,    0,    0,  826,  826,  827,    0,    0,
      827,    0,    0,  827,  827,    0,    0,    0,    0,  827,

      827,  827,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  830,    0,    0,    0,    0,    0,    0,
      830,    0,    0,    0,    0,    0,  830,  830,  831,  831,
        0,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  832,
        0,    0,  832,    0,    0,  832,  832,    0,    0,    0,
        0,  832,  832,  832,  833,    0,    0,    0,    0,  833,
      833,  833,    0,    0,    0,    0,    0,  833,  833,  834,
        0,    0,  834,    0,    0,  834,  834,    0,    0,    0,

        0,  834,  834,  834,  838,    0,    0,    0,    0,    0,
        0,  838,    0,    0,    0,    0,    0,  838,  838,  840,
      840,    0,    0,  840,  840,    0,  840,  840,  840,  840,
      840,    0,    0,    0,    0,  840,  840,  840,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  851,    0,    0,    0,    0,
      851,  851,  851,    0,    0,    0,    0,    0,  851,  851,

      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,

      858,  858,  858,  858,  858,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  863,  863,    0,
        0,  863,  863,    0,  863,  863,  863,  863,  863,    0,
        0,    0,    0,  863,  863,  863,  867,  867,  867,  867,
      867,  867,  867,    0,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  868,  868,  868,
      868,  868,  868,  868,    0,  868,  868,  868,  868,  868,

      868,  868,  868,  868,  868,  868,  868,  868,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  873,  873,  873,  873,  873,  873,  873,  873,

      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  878,  878,  878,

      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[143] =
    {   0,
1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 
    0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 
    1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "pgc.l"
#line 2 "pgc.l"
/*-------------------------------------------------------------------------
 *
 * pgc.l
 *	  lexical scanner for ecpg
 *
 * This is a modified version of src/backend/parser/scan.l
 *
 *
 * Portions Copyright (c) 1996-2011, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/interfaces/ecpg/preproc/pgc.l
 *
 *-------------------------------------------------------------------------
 */
#include "postgres_fe.h"

#include <ctype.h>
#include <sys/types.h>
#include <limits.h>

#include "extern.h"

extern YYSTYPE yylval;

static int		xcdepth = 0;	/* depth of nesting in slash-star comments */
static char	   *dolqstart;      /* current $foo$ quote start string */
static YY_BUFFER_STATE scanbufhandle;
static char *scanbuf;

/*
 * literalbuf is used to accumulate literal values when multiple rules
 * are needed to parse a single literal.  Call startlit to reset buffer
 * to empty, addlit to add text.  Note that the buffer is permanently
 * malloc'd to the largest size needed so far in the current run.
 */
static char    *literalbuf = NULL;		/* expandable buffer */
static int		literallen;				/* actual current length */
static int		literalalloc;			/* current allocated buffer size */

/* Used for detecting global state together with braces_open */
static int		parenths_open;

/* Used to tell parse_include() whether the command was #include or #include_next */
static bool		include_next;

#define startlit()	(literalbuf[0] = '\0', literallen = 0)
static void addlit(char *ytext, int yleng);
static void addlitchar (unsigned char);
static void parse_include (void);
static bool ecpg_isspace(char ch);
static bool isdefine(void);
static bool isinformixdefine(void);

char *token_start;
int state_before;

struct _yy_buffer
{
	YY_BUFFER_STATE		buffer;
	long				lineno;
	char		  		*filename;
	struct _yy_buffer 	*next;
} *yy_buffer = NULL;

static char *old;

#define MAX_NESTED_IF 128
static short preproc_tos;
static short ifcond;
static struct _if_value
{
	short condition;
	short else_branch;
} stacked_if_value[MAX_NESTED_IF];

#define YY_NO_INPUT 1

/*
 * OK, here is a short description of lex/flex rules behavior.
 * The longest pattern which matches an input string is always chosen.
 * For equal-length patterns, the first occurring in the rules list is chosen.
 * INITIAL is the starting state, to which all non-conditional rules apply.
 * Exclusive states change parsing rules while the state is active.  When in
 * an exclusive state, only those rules defined for that state apply.
 *
 * We use exclusive states for quoted strings, extended comments,
 * and to eliminate parsing troubles for numeric strings.
 * Exclusive states:
 *	<xb> bit string literal
 *	<xc> extended C-style comments - thomas 1997-07-12
 *	<xd> delimited identifiers (double-quoted identifiers) - thomas 1997-10-27
 *	<xh> hexadecimal numeric string - thomas 1997-11-16
 *	<xq> standard quoted strings - thomas 1997-07-30
 *	<xqc> standard quoted strings in C - michael
 *	<xe> extended quoted strings (support backslash escape sequences)
 *	<xn> national character quoted strings
 *  <xdolq> $foo$ quoted strings
 *  <xui> quoted identifier with Unicode escapes
 *  <xus> quoted string with Unicode escapes
 */














/* Bit string
 */
/* Hexadecimal number */
/* National character */
/* Quoted string that allows backslash escapes */
/* C version of hex number */
/* Extended quote
 * xqdouble implements embedded quote, ''''
 */
/* $foo$ style quotes ("dollar quoting")
 * The quoted string starts with $foo$ where "foo" is an optional string
 * in the form of an identifier, except that it may not contain "$",
 * and extends to the first occurrence of an identical string.
 * There is *no* processing of the quoted text.
 *
 * {dolqfailed} is an error rule to avoid scanner backup when {dolqdelim}
 * fails to match its trailing "$".
 */
/* Double quote
 * Allows embedded spaces and other special characters into identifiers.
 */
/* Unicode escapes */
/* (The ecpg scanner is not backup-free, so the fail rules in scan.l are not needed here, but could be added if desired.) */
/* Quoted identifier with Unicode escapes */
/* Quoted string with Unicode escapes */
/* special stuff for C strings */
/* C-style comments
 *
 * The "extended comment" syntax closely resembles allowable operator syntax.
 * The tricky part here is to get lex to recognize a string starting with
 * slash-star as a comment, when interpreting it as an operator would produce
 * a longer match --- remember lex will prefer a longer match!	Also, if we
 * have something like plus-slash-star, lex will think this is a 3-character
 * operator whereas we want to see it as a + operator and a comment start.
 * The solution is two-fold:
 * 1. append {op_chars}* to xcstart so that it matches as much text as
 *	  {operator} would. Then the tie-breaker (first matching rule of same
 *	  length) ensures xcstart wins.  We put back the extra stuff with yyless()
 *	  in case it contains a star-slash that should terminate the comment.
 * 2. In the operator rule, check for slash-star within the operator, and
 *	  if found throw it back with yyless().  This handles the plus-slash-star
 *	  problem.
 * Dash-dash comments have similar interactions with the operator rule.
 */
/*
 * "self" is the set of chars that should be returned as single-character
 * tokens.	"op_chars" is the set of chars that can make up "Op" tokens,
 * which can be one or more characters long (but if a single-char token
 * appears in the "self" set, it is not to be returned as an Op).  Note
 * that the sets overlap, but each has some chars that are not in the other.
 *
 * If you change either set, adjust the character lists appearing in the
 * rule for "operator"!
 */
/* we no longer allow unary minus in numbers.
 * instead we pass it separately to parser. there it gets
 * coerced via doNegate() -- Leon aug 20 1999
 *
 * {realfail1} and {realfail2} are added to prevent the need for scanner
 * backup when the {real} rule fails to match completely.
 */
/*
 * In order to make the world safe for Windows and Mac clients as well as
 * Unix ones, we accept either \n or \r as a newline.  A DOS-style \r\n
 * sequence will be seen as two successive newlines, but that doesn't cause
 * any problems.  SQL92-style comments, which start with -- and extend to the
 * next newline, are treated as equivalent to a single whitespace character.
 *
 * NOTE a fine point: if there is no newline following --, we will absorb
 * everything to the end of the input as a comment.  This is correct.  Older
 * versions of Postgres failed to recognize -- as a comment if the input
 * did not end with a newline.
 *
 * XXX perhaps \f (formfeed) should be treated as a newline as well?
 *
 * XXX if you change the set of whitespace characters, fix ecpg_isspace()
 * to agree.
 */
/*
 * SQL92 requires at least one newline in the whitespace separating
 * string literals that are to be concatenated.  Silly, but who are we
 * to argue?  Note that {whitespace_with_newline} should not have * after
 * it, whereas {whitespace} should generally have a * after it...
 */
/* special characters for other dbms */
/* we have to react differently in compat mode */
/* some stuff needed for ecpg */
/* we might want to parse all cpp include files */
/* take care of cpp lines, they may also be continuated */
/* first a general line for all commands not starting with "i" */
/* and then the other commands starting with "i", we have to add these
 * seperately because the cppline production would match on "include" too */
/*
 * Dollar quoted strings are totally opaque, and no escaping is done on them.
 * Other quoted strings must allow some special characters such as single-quote
 *	and newline.
 * Embedded single-quotes are implemented both in the SQL standard
 *	style of two adjacent single quotes "''" and in the Postgres/Java style
 *	of escaped-quote "\'".
 * Other embedded escaped characters are matched explicitly and the leading
 *	backslash is dropped from the string. - thomas 1997-09-24
 * Note that xcstart must appear before operator, as explained above!
 *	Also whitespace (comment) must appear before operator.
 */
#line 2092 "pgc.c"

#define INITIAL 0
#define C 1
#define SQL 2
#define incl 3
#define def 4
#define def_ident 5
#define undef 6
#define xb 7
#define xc 8
#define xd 9
#define xdc 10
#define xh 11
#define xe 12
#define xn 13
#define xq 14
#define xqc 15
#define xdolq 16
#define xcond 17
#define xskip 18
#define xui 19
#define xus 20

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 362 "pgc.l"



		/* code to execute during start of each call of yylex() */
		token_start = NULL;


#line 2302 "pgc.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 794 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 793 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 369 "pgc.l"
{ /* ignore */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 371 "pgc.l"
{
					token_start = yytext;
					state_before = YYSTATE;
					xcdepth = 0;
					BEGIN(xc);
					/* Put back any characters past slash-star; see above */
					yyless(2);
					fputs("/*", yyout);
				}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 380 "pgc.l"
{
					xcdepth++;
			 		/* Put back any characters past slash-star; see above */
			 		yyless(2);
					fputs("/*", yyout);
				}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 387 "pgc.l"
{
					ECHO;
					if (xcdepth <= 0)
					{
						BEGIN(state_before);
						token_start = NULL;
					}
					else
						xcdepth--;
				}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 398 "pgc.l"
{ ECHO; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 399 "pgc.l"
{ ECHO; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 400 "pgc.l"
{ ECHO; }
	YY_BREAK
case YY_STATE_EOF(xc):
#line 402 "pgc.l"
{ mmerror(PARSE_ERROR, ET_FATAL, "unterminated /* comment"); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 404 "pgc.l"
{
					token_start = yytext;
					BEGIN(xb);
					startlit();
					addlitchar('b');
				}
	YY_BREAK
case 9:
/* rule 9 can match eol */
#line 411 "pgc.l"
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 411 "pgc.l"
{
					yyless(1);
					BEGIN(SQL);
					if (literalbuf[strspn(literalbuf, "01") + 1] != '\0')
						mmerror(PARSE_ERROR, ET_ERROR, "invalid bit string literal");
					yylval.str = mm_strdup(literalbuf);
					return BCONST;
				}
	YY_BREAK
case 11:
/* rule 11 can match eol */
#line 421 "pgc.l"
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 421 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
#line 423 "pgc.l"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 423 "pgc.l"
{ /* ignore */ }
	YY_BREAK
case YY_STATE_EOF(xb):
#line 424 "pgc.l"
{ mmerror(PARSE_ERROR, ET_FATAL, "unterminated bit string literal"); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 426 "pgc.l"
{
					token_start = yytext;
					BEGIN(xh);
					startlit();
					addlitchar('x');
				}
	YY_BREAK
case 16:
/* rule 16 can match eol */
#line 433 "pgc.l"
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 433 "pgc.l"
{
				yyless(1);
				BEGIN(SQL);
				yylval.str = mm_strdup(literalbuf);
				return XCONST;
			}
	YY_BREAK
case YY_STATE_EOF(xh):
#line 440 "pgc.l"
{ mmerror(PARSE_ERROR, ET_FATAL, "unterminated hexadecimal string literal"); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 441 "pgc.l"
{
				/* National character.
				 * Transfer it as-is to the backend.
				 */
				token_start = yytext;
				state_before = YYSTATE;
				BEGIN(xn);
				startlit();
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 450 "pgc.l"
{
				token_start = yytext;
				state_before = YYSTATE;
				BEGIN(xqc);
				startlit();
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 456 "pgc.l"
{
				token_start = yytext;
				state_before = YYSTATE;
				BEGIN(xq);
				startlit();
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 462 "pgc.l"
{
				token_start = yytext;
				state_before = YYSTATE;
				BEGIN(xe);
				startlit();
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 468 "pgc.l"
{
				token_start = yytext;
				state_before = YYSTATE;
				BEGIN(xus);
				startlit();
				addlit(yytext, yyleng);
			}
	YY_BREAK
case 23:
/* rule 23 can match eol */
#line 476 "pgc.l"
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 476 "pgc.l"
{
				yyless(1);
				BEGIN(state_before);
				yylval.str = mm_strdup(literalbuf);
				return SCONST;
			}
	YY_BREAK
case 25:
/* rule 25 can match eol */
#line 483 "pgc.l"
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 483 "pgc.l"
{
				yyless(1);
				BEGIN(state_before);
				yylval.str = mm_strdup(literalbuf);
				return ECONST;
			}
	YY_BREAK
case 27:
/* rule 27 can match eol */
#line 490 "pgc.l"
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 490 "pgc.l"
{
				yyless(1);
				BEGIN(state_before);
				yylval.str = mm_strdup(literalbuf);
				return NCONST;
			}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 496 "pgc.l"
{
				addlit(yytext, yyleng);
				BEGIN(state_before);
				yylval.str = mm_strdup(literalbuf);
				return UCONST;
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 502 "pgc.l"
{ addlitchar('\''); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 503 "pgc.l"
{
				addlitchar('\\');
				addlitchar('\'');
			}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 507 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 508 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 509 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 510 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 511 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 512 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 513 "pgc.l"
{ /* ignore */ }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 514 "pgc.l"
{
			   /* This is only needed for \ just before EOF */
			   addlitchar(yytext[0]);
			}
	YY_BREAK
case YY_STATE_EOF(xq):
case YY_STATE_EOF(xqc):
case YY_STATE_EOF(xe):
case YY_STATE_EOF(xn):
case YY_STATE_EOF(xus):
#line 518 "pgc.l"
{ mmerror(PARSE_ERROR, ET_FATAL, "unterminated quoted string"); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 519 "pgc.l"
{
				/* throw back all but the initial "$" */
				yyless(1);
				/* and treat it as {other} */
				return yytext[0];
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 525 "pgc.l"
{
				token_start = yytext;
				dolqstart = mm_strdup(yytext);
				BEGIN(xdolq);
				startlit();
				addlit(yytext, yyleng);
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 532 "pgc.l"
{
				if (strcmp(yytext, dolqstart) == 0)
				{
					addlit(yytext, yyleng);
					free(dolqstart);
					BEGIN(SQL);
					yylval.str = mm_strdup(literalbuf);
					return DOLCONST;
				}
				else
				{
			        /*
			         * When we fail to match $...$ to dolqstart, transfer
			         * the $... part to the output, but put back the final
			         * $ for rescanning.  Consider $delim$...$junk$delim$
			         */
			        addlit(yytext, yyleng-1);
			        yyless(yyleng-1);
				}
			}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 552 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 553 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 554 "pgc.l"
{
				/* single quote or dollar sign */
				addlitchar(yytext[0]);
			}
	YY_BREAK
case YY_STATE_EOF(xdolq):
#line 558 "pgc.l"
{ base_yyerror("unterminated dollar-quoted string"); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 559 "pgc.l"
{
						state_before = YYSTATE;
						BEGIN(xd);
						startlit();
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 564 "pgc.l"
{
						state_before = YYSTATE;
						BEGIN(xui);
						startlit();
						addlit(yytext, yyleng);
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 570 "pgc.l"
{
						BEGIN(state_before);
						if (literallen == 0)
							mmerror(PARSE_ERROR, ET_ERROR, "zero-length delimited identifier");
						/* The backend will truncate the identifier here. We do not as it does not change the result. */
						yylval.str = mm_strdup(literalbuf);
						return CSTRING;
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 578 "pgc.l"
{
						BEGIN(state_before);
						yylval.str = mm_strdup(literalbuf);
						return CSTRING;
					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 583 "pgc.l"
{
						BEGIN(state_before);
						if (literallen == 2) /* "U&" */
							mmerror(PARSE_ERROR, ET_ERROR, "zero-length delimited identifier");
						/* The backend will truncate the identifier here. We do not as it does not change the result. */
						addlit(yytext, yyleng);
						yylval.str = mm_strdup(literalbuf);
						return UIDENT;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 592 "pgc.l"
{ addlitchar('"'); }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 593 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case YY_STATE_EOF(xd):
case YY_STATE_EOF(xdc):
case YY_STATE_EOF(xui):
#line 594 "pgc.l"
{ mmerror(PARSE_ERROR, ET_FATAL, "unterminated quoted identifier"); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 595 "pgc.l"
{
						state_before = YYSTATE;
						BEGIN(xdc);
						startlit();
					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 600 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 601 "pgc.l"
{ return TYPECAST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 602 "pgc.l"
{ return DOT_DOT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 603 "pgc.l"
{ return COLON_EQUALS; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 604 "pgc.l"
{
			  /* are we simulating Informix? */
				if (INFORMIX_MODE)
				{
					unput(':');
				}
				else
					return yytext[0];
				}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 613 "pgc.l"
{ /*
					   * We may find a ';' inside a structure
					   * definition in a TYPE or VAR statement.
					   * This is not an EOL marker.
					   */
					  if (yytext[0] == ';' && struct_level == 0)
						 BEGIN(C);
					  return yytext[0];
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 622 "pgc.l"
{
						/*
						 * Check for embedded slash-star or dash-dash; those
						 * are comment starts, so operator must stop there.
						 * Note that slash-star or dash-dash at the first
						 * character will match a prior rule, not this one.
						 */
						int		nchars = yyleng;
						char   *slashstar = strstr(yytext, "/*");
						char   *dashdash = strstr(yytext, "--");

						if (slashstar && dashdash)
						{
							/* if both appear, take the first one */
							if (slashstar > dashdash)
								slashstar = dashdash;
						}
						else if (!slashstar)
							slashstar = dashdash;
						if (slashstar)
							nchars = slashstar - yytext;

						/*
						 * For SQL compatibility, '+' and '-' cannot be the
						 * last char of a multi-char operator unless the operator
						 * contains chars that are not in SQL operators.
						 * The idea is to lex '=-' as two operators, but not
						 * to forbid operator names like '?-' that could not be
						 * sequences of SQL operators.
						 */
						while (nchars > 1 &&
							   (yytext[nchars-1] == '+' ||
								yytext[nchars-1] == '-'))
						{
							int		ic;

							for (ic = nchars-2; ic >= 0; ic--)
							{
								if (strchr("~!@#^&|`?%", yytext[ic]))
									break;
							}
							if (ic >= 0)
								break; /* found a char that makes it OK */
							nchars--; /* else remove the +/-, and check again */
						}

						if (nchars < yyleng)
						{
							/* Strip the unwanted chars from the token */
							yyless(nchars);
							/*
							 * If what we have left is only one char, and it's
							 * one of the characters matching "self", then
							 * return it as a character token the same way
							 * that the "self" rule would have.
							 */
							if (nchars == 1 &&
								strchr(",()[].;:+-*/%^<>=", yytext[0]))
								return yytext[0];
						}

						/* Convert "!=" operator to "<>" for compatibility */
						if (strcmp(yytext, "!=") == 0)
							yylval.str = mm_strdup("<>");
						else
							yylval.str = mm_strdup(yytext);
						return Op;
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 690 "pgc.l"
{
						yylval.ival = atol(yytext+1);
						return PARAM;
					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 694 "pgc.l"
{
						long val;
						char* endptr;

						errno = 0;
						val = strtol((char *)yytext, &endptr,10);
						if (*endptr != '\0' || errno == ERANGE
#ifdef HAVE_LONG_INT_64
							/* if long > 32 bits, check for overflow of int4 */
							|| val != (long) ((int32) val)
#endif
							)
						{
							errno = 0;
							yylval.str = mm_strdup(yytext);
							return FCONST;
						}
						yylval.ival = val;
						return ICONST;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 714 "pgc.l"
{
						yylval.str = mm_strdup(yytext);
						return IP;
				}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 718 "pgc.l"
{
						yylval.str = mm_strdup(yytext);
						return FCONST;
			}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 722 "pgc.l"
{
						yylval.str = mm_strdup(yytext);
						return FCONST;
			}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 726 "pgc.l"
{
						yyless(yyleng-1);
						yylval.str = mm_strdup(yytext);
						return FCONST;
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 731 "pgc.l"
{
						yyless(yyleng-2);
						yylval.str = mm_strdup(yytext);
						return FCONST;
					}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 736 "pgc.l"
{
						yylval.str = mm_strdup(yytext+1);
						return(CVARIABLE);
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 740 "pgc.l"
{
						const ScanKeyword    *keyword;

						if (!isdefine())
						{
							/* Is it an SQL/ECPG keyword? */
							keyword = ScanECPGKeywordLookup(yytext);
							if (keyword != NULL)
								return keyword->value;

							/* Is it a C keyword? */
							keyword = ScanCKeywordLookup(yytext);
							if (keyword != NULL)
								return keyword->value;

							/*
							 * None of the above.  Return it as an identifier.
							 *
							 * The backend will attempt to truncate and case-fold
							 * the identifier, but I see no good reason for ecpg
							 * to do so; that's just another way that ecpg could get
							 * out of step with the backend.
							 */
							yylval.str = mm_strdup(yytext);
							return IDENT;
						}
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 767 "pgc.l"
{ return yytext[0]; }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 768 "pgc.l"
{ BEGIN(SQL); return SQL_START; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 769 "pgc.l"
{
						/* are we simulating Informix? */
						if (INFORMIX_MODE)
						{
							BEGIN(SQL);
							return SQL_START;
						}
						else
							return S_ANYTHING;
					 }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 779 "pgc.l"
{ ECHO; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 780 "pgc.l"
{
						char* endptr;

						errno = 0;
						yylval.ival = strtoul((char *)yytext,&endptr,16);
						if (*endptr != '\0' || errno == ERANGE)
						{
							errno = 0;
							yylval.str = mm_strdup(yytext);
							return SCONST;
						}
						return ICONST;
					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 793 "pgc.l"
{
						if (system_includes)
						{
							include_next = false;
							BEGIN(incl);
						}
						else
					 	{
							yylval.str = mm_strdup(yytext);
							return(CPP_LINE);
					  	}
					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 805 "pgc.l"
{
						if (system_includes)
						{
							include_next = true;
							BEGIN(incl);
						}
						else
					 	{
							yylval.str = mm_strdup(yytext);
							return(CPP_LINE);
					  	}
					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 817 "pgc.l"
{
						yylval.str = mm_strdup(yytext);
						return(CPP_LINE);
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 821 "pgc.l"
{
						const ScanKeyword		*keyword;

						/*
						 * Try to detect a function name:
						 * look for identifiers at the global scope
						 * keep the last identifier before the first '(' and '{' */
						if (braces_open == 0 && parenths_open == 0)
						{
							if (current_function)
								free(current_function);
							current_function = mm_strdup(yytext);
						}
						/* Informix uses SQL defines only in SQL space */
						/* however, some defines have to be taken care of for compatibility */
						if ((!INFORMIX_MODE || !isinformixdefine()) && !isdefine())
						{
							keyword = ScanCKeywordLookup(yytext);
							if (keyword != NULL)
								return keyword->value;
							else
							{
								yylval.str = mm_strdup(yytext);
								return IDENT;
							}
						}
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 848 "pgc.l"
{ return(':'); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 849 "pgc.l"
{ return(';'); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 850 "pgc.l"
{ return(','); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 851 "pgc.l"
{ return('*'); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 852 "pgc.l"
{ return('%'); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 853 "pgc.l"
{ return('/'); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 854 "pgc.l"
{ return('+'); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 855 "pgc.l"
{ return('-'); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 856 "pgc.l"
{ parenths_open++; return('('); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 857 "pgc.l"
{ parenths_open--; return(')'); }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 858 "pgc.l"
{ ECHO; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 859 "pgc.l"
{ return('{'); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 860 "pgc.l"
{ return('}'); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 861 "pgc.l"
{ return('['); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 862 "pgc.l"
{ return(']'); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 863 "pgc.l"
{ return('='); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 864 "pgc.l"
{ return(S_MEMBER); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 865 "pgc.l"
{ return(S_RSHIFT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 866 "pgc.l"
{ return(S_LSHIFT); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 867 "pgc.l"
{ return(S_OR); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 868 "pgc.l"
{ return(S_AND); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 869 "pgc.l"
{ return(S_INC); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 870 "pgc.l"
{ return(S_DEC); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 871 "pgc.l"
{ return(S_EQUAL); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 872 "pgc.l"
{ return(S_NEQUAL); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 873 "pgc.l"
{ return(S_ADD); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 874 "pgc.l"
{ return(S_SUB); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 875 "pgc.l"
{ return(S_MUL); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 876 "pgc.l"
{ return(S_DIV); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 877 "pgc.l"
{ return(S_MOD); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 878 "pgc.l"
{ return(S_MEMPOINT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 879 "pgc.l"
{ return(S_DOTPOINT); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 880 "pgc.l"
{ return S_ANYTHING; }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 881 "pgc.l"
{ BEGIN(def_ident); }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 882 "pgc.l"
{
						/* are we simulating Informix? */
						if (INFORMIX_MODE)
						{
							BEGIN(def_ident);
						}
						else
						{
							yyless(1);
							return (S_ANYTHING);
						}
					}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 894 "pgc.l"
{ BEGIN(undef); }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 895 "pgc.l"
{
						/* are we simulating Informix? */
						if (INFORMIX_MODE)
						{
							BEGIN(undef);
						}
						else
						{
							yyless(1);
							return (S_ANYTHING);
						}
					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 907 "pgc.l"
{
					struct _defines *ptr, *ptr2 = NULL;
					int i;

					/*
					 *	Skip the ";" and trailing whitespace. Note that yytext
					 *	contains at least one non-space character plus the ";"
					 */
					for (i = strlen(yytext)-2;
						 i > 0 && ecpg_isspace(yytext[i]);
						 i-- )
						;
					yytext[i+1] = '\0';


					for (ptr = defines; ptr != NULL; ptr2 = ptr, ptr = ptr->next)
					{
						if (strcmp(yytext, ptr->old) == 0)
						{
							if (ptr2 == NULL)
								defines = ptr->next;
							else
								ptr2->next = ptr->next;
							free(ptr->new);
							free(ptr->old);
							free(ptr);
							break;
						}
					}

					BEGIN(C);
				}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 939 "pgc.l"
{
		                	mmerror(PARSE_ERROR, ET_FATAL, "missing identifier in EXEC SQL UNDEF command");
			                yyterminate();
				}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 943 "pgc.l"
{ BEGIN(incl); }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 944 "pgc.l"
{
					  /* are we simulating Informix? */
					  if (INFORMIX_MODE)
					  {
						  BEGIN(incl);
					  }
					  else
					  {
						  yyless(1);
						  return (S_ANYTHING);
					  }
					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 956 "pgc.l"
{ ifcond = TRUE; BEGIN(xcond); }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 957 "pgc.l"
{
					  /* are we simulating Informix? */
					  if (INFORMIX_MODE)
					  {
						  ifcond = TRUE;
						  BEGIN(xcond);
					  }
					  else
					  {
						  yyless(1);
						  return (S_ANYTHING);
					  }
					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 970 "pgc.l"
{ ifcond = FALSE; BEGIN(xcond); }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 971 "pgc.l"
{
					  /* are we simulating Informix? */
					  if (INFORMIX_MODE)
					  {
						  ifcond = FALSE;
						  BEGIN(xcond);
					  }
					  else
					  {
						  yyless(1);
						  return (S_ANYTHING);
					  }
					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 984 "pgc.l"
{	/* pop stack */
						if ( preproc_tos == 0 ) {
							mmerror(PARSE_ERROR, ET_FATAL, "missing matching \"EXEC SQL IFDEF\" / \"EXEC SQL IFNDEF\"");
						}
						else if ( stacked_if_value[preproc_tos].else_branch )
							mmerror(PARSE_ERROR, ET_FATAL, "missing \"EXEC SQL ENDIF;\"");
						else
							preproc_tos--;

						ifcond = TRUE; BEGIN(xcond);
					}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 995 "pgc.l"
{
					/* are we simulating Informix? */
					if (INFORMIX_MODE)
					{
						if (preproc_tos == 0)
							mmerror(PARSE_ERROR, ET_FATAL, "missing matching \"EXEC SQL IFDEF\" / \"EXEC SQL IFNDEF\"");
						else if (stacked_if_value[preproc_tos].else_branch)
							mmerror(PARSE_ERROR, ET_FATAL, "missing \"EXEC SQL ENDIF;\"");
						else
							preproc_tos--;

						ifcond = TRUE;
						BEGIN(xcond);
					}
					else
					{
						yyless(1);
						return (S_ANYTHING);
					}
				}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1016 "pgc.l"
{	/* only exec sql endif pops the stack, so take care of duplicated 'else' */
					if (stacked_if_value[preproc_tos].else_branch)
						mmerror(PARSE_ERROR, ET_FATAL, "more than one EXEC SQL ELSE");
					else
					{
						stacked_if_value[preproc_tos].else_branch = TRUE;
						stacked_if_value[preproc_tos].condition =
							(stacked_if_value[preproc_tos-1].condition &&
							 !stacked_if_value[preproc_tos].condition);

						if (stacked_if_value[preproc_tos].condition)
							BEGIN(C);
						else
							BEGIN(xskip);
					}
				}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1032 "pgc.l"
{
					/* are we simulating Informix? */
					if (INFORMIX_MODE)
					{
						if (stacked_if_value[preproc_tos].else_branch)
							mmerror(PARSE_ERROR, ET_FATAL, "more than one EXEC SQL ELSE");
						else
						{
							stacked_if_value[preproc_tos].else_branch = TRUE;
							stacked_if_value[preproc_tos].condition =
							(stacked_if_value[preproc_tos-1].condition &&
							 !stacked_if_value[preproc_tos].condition);

							if (stacked_if_value[preproc_tos].condition)
								BEGIN(C);
							else
								BEGIN(xskip);
						}
					}
					else
					{
						yyless(1);
						return (S_ANYTHING);
					}
				}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1057 "pgc.l"
{
					if (preproc_tos == 0)
						mmerror(PARSE_ERROR, ET_FATAL, "unmatched EXEC SQL ENDIF");
					else
						preproc_tos--;

					if (stacked_if_value[preproc_tos].condition)
					   BEGIN(C);
					else
					   BEGIN(xskip);
				}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1068 "pgc.l"
{
					/* are we simulating Informix? */
					if (INFORMIX_MODE)
					{
						if (preproc_tos == 0)
							mmerror(PARSE_ERROR, ET_FATAL, "unmatched EXEC SQL ENDIF");
						else
							preproc_tos--;

						if (stacked_if_value[preproc_tos].condition)
							BEGIN(C);
						else
							BEGIN(xskip);
					}
					else
					{
						yyless(1);
						return (S_ANYTHING);
					}
				}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1089 "pgc.l"
{ /* ignore */ }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1091 "pgc.l"
{
					if (preproc_tos >= MAX_NESTED_IF-1)
						mmerror(PARSE_ERROR, ET_FATAL, "too many nested EXEC SQL IFDEF conditions");
					else
					{
						struct _defines *defptr;
						unsigned int i;

						/*
						 *	Skip the ";" and trailing whitespace. Note that yytext
						 *	contains at least one non-space character plus the ";"
						 */
						for (i = strlen(yytext)-2;
							 i > 0 && ecpg_isspace(yytext[i]);
							 i-- )
							;
						yytext[i+1] = '\0';

						for (defptr = defines;
							 defptr != NULL && strcmp(yytext, defptr->old) != 0;
							 defptr = defptr->next);

						preproc_tos++;
						stacked_if_value[preproc_tos].else_branch = FALSE;
						stacked_if_value[preproc_tos].condition =
						(defptr ? ifcond : !ifcond) && stacked_if_value[preproc_tos-1].condition;
					}

					if (stacked_if_value[preproc_tos].condition)
						BEGIN(C);
					else
						BEGIN(xskip);
				}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1125 "pgc.l"
{
				mmerror(PARSE_ERROR, ET_FATAL, "missing identifier in EXEC SQL IFDEF command");
				yyterminate();
			}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1129 "pgc.l"
{
				old = mm_strdup(yytext);
				BEGIN(def);
				startlit();
			}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1134 "pgc.l"
{
				mmerror(PARSE_ERROR, ET_FATAL, "missing identifier in EXEC SQL DEFINE command");
				yyterminate();
			}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1138 "pgc.l"
{
						struct _defines *ptr, *this;

						for (ptr = defines; ptr != NULL; ptr = ptr->next)
						{
							 if (strcmp(old, ptr->old) == 0)
							 {
								free(ptr->new);
								ptr->new = mm_strdup(literalbuf);
							 }
						}
						if (ptr == NULL)
						{
							this = (struct _defines *) mm_alloc(sizeof(struct _defines));

							/* initial definition */
							this->old = old;
							this->new = mm_strdup(literalbuf);
							this->next = defines;
							this->used = NULL;
							defines = this;
						}

						BEGIN(C);
					}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1163 "pgc.l"
{ addlit(yytext, yyleng); }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1164 "pgc.l"
{	parse_include(); }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1165 "pgc.l"
{	parse_include(); }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1166 "pgc.l"
{ parse_include(); }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1167 "pgc.l"
{
					mmerror(PARSE_ERROR, ET_FATAL, "syntax error in EXEC SQL INCLUDE command");
					yyterminate();
				}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(C):
case YY_STATE_EOF(SQL):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(def):
case YY_STATE_EOF(def_ident):
case YY_STATE_EOF(undef):
case YY_STATE_EOF(xcond):
case YY_STATE_EOF(xskip):
#line 1172 "pgc.l"
{
			  		if (yy_buffer == NULL)
					{
				  		if ( preproc_tos > 0 )
						{
					  		preproc_tos = 0;
							mmerror(PARSE_ERROR, ET_FATAL, "missing \"EXEC SQL ENDIF;\"");
				  		}
						yyterminate();
					}
			  		else
			  		{
						struct _yy_buffer *yb = yy_buffer;
						int i;
						struct _defines *ptr;

						for (ptr = defines; ptr; ptr = ptr->next)
							if (ptr->used == yy_buffer)
							{
								ptr->used = NULL;
								break;
							}

						if (yyin != NULL)
							fclose(yyin);

						yy_delete_buffer(YY_CURRENT_BUFFER );
						yy_switch_to_buffer(yy_buffer->buffer);

						yylineno = yy_buffer->lineno;

						/* We have to output the filename only if we change files here */
						i = strcmp(input_filename, yy_buffer->filename);

						free(input_filename);
						input_filename = yy_buffer->filename;

						yy_buffer = yy_buffer->next;
						free(yb);

						if (i != 0)
							output_line_number();

			  		}
				}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1217 "pgc.l"
{ mmerror(PARSE_ERROR, ET_FATAL, "internal error: unreachable state; please report this to <pgsql-bugs@postgresql.org>"); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1218 "pgc.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3870 "pgc.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 794 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 794 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 793);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1218 "pgc.l"


void
lex_init(void)
{
	braces_open = 0;
	parenths_open = 0;
	current_function = NULL;

	preproc_tos = 0;
	yylineno = 1;
	ifcond = TRUE;
	stacked_if_value[preproc_tos].condition = ifcond;
	stacked_if_value[preproc_tos].else_branch = FALSE;

	/* initialize literal buffer to a reasonable but expansible size */
	if (literalbuf == NULL)
	{
		literalalloc = 1024;
		literalbuf = (char *) malloc(literalalloc);
	}
	startlit();

	BEGIN(C);
}

static void
addlit(char *ytext, int yleng)
{
	/* enlarge buffer if needed */
	if ((literallen+yleng) >= literalalloc)
	{
		do
			literalalloc *= 2;
		while ((literallen+yleng) >= literalalloc);
		literalbuf = (char *) realloc(literalbuf, literalalloc);
	}
	/* append new data, add trailing null */
	memcpy(literalbuf+literallen, ytext, yleng);
	literallen += yleng;
	literalbuf[literallen] = '\0';
}

static void
addlitchar(unsigned char ychar)
{
	/* enlarge buffer if needed */
        if ((literallen+1) >= literalalloc)
        {
                literalalloc *= 2;
                literalbuf = (char *) realloc(literalbuf, literalalloc);
        }
	/* append new data, add trailing null */
	literalbuf[literallen] = ychar;
	literallen += 1;
	literalbuf[literallen] = '\0';
}

static void
parse_include(void)
{
	/* got the include file name */
	struct _yy_buffer *yb;
  	struct _include_path *ip;
  	char inc_file[MAXPGPATH];
  	unsigned int i;

  	yb = mm_alloc(sizeof(struct _yy_buffer));

  	yb->buffer =	YY_CURRENT_BUFFER;
  	yb->lineno = yylineno;
  	yb->filename = input_filename;
  	yb->next = yy_buffer;

  	yy_buffer = yb;

  	/*
	 * skip the ";" if there is one and trailing whitespace. Note that
	 * yytext contains at least one non-space character plus the ";"
	 */
  	for (i = strlen(yytext)-2;
		 i > 0 && ecpg_isspace(yytext[i]);
		 i--)
		;

	if (yytext[i] == ';')
		i--;

	yytext[i+1] = '\0';

	yyin = NULL;

	/* If file name is enclosed in '"' remove these and look only in '.' */
	/* Informix does look into all include paths though, except filename starts with '/' */
	if (yytext[0] == '"' && yytext[i] == '"' &&
	    ((compat != ECPG_COMPAT_INFORMIX && compat != ECPG_COMPAT_INFORMIX_SE) || yytext[1] == '/'))
	{
		yytext[i] = '\0';
		memmove(yytext, yytext+1, strlen(yytext));

		strncpy(inc_file, yytext, sizeof(inc_file));
		yyin = fopen(inc_file, "r");
		if (!yyin)
		{
			if (strcmp(inc_file + strlen(inc_file) - 2, ".h"))
			{
				strcat(inc_file, ".h");
				yyin = fopen(inc_file, "r");
			}
		}

	}
	else
	{
		if ((yytext[0] == '"' && yytext[i] == '"') || (yytext[0] == '<' && yytext[i] == '>'))
		{
			yytext[i] = '\0';
			memmove(yytext, yytext+1, strlen(yytext));
		}

	  	for (ip = include_paths; yyin == NULL && ip != NULL; ip = ip->next)
	  	{
			if (strlen(ip->path) + strlen(yytext) + 3 > MAXPGPATH)
			{
				fprintf(stderr, _("Error: include path \"%s/%s\" is too long on line %d, skipping\n"), ip->path, yytext, yylineno);
				continue;
			}
			snprintf (inc_file, sizeof(inc_file), "%s/%s", ip->path, yytext);
			yyin = fopen(inc_file, "r");
			if (!yyin)
			{
				if (strcmp(inc_file + strlen(inc_file) - 2, ".h"))
				{
					strcat(inc_file, ".h");
					yyin = fopen( inc_file, "r" );
				}
			}
			/* if the command was "include_next" we have to disregard the first hit */
			if (yyin && include_next)
			{
				yyin = NULL;
				include_next = false;
			}
		}
	}
	if (!yyin)
		mmerror(NO_INCLUDE_FILE, ET_FATAL, "could not open include file \"%s\" on line %d", yytext, yylineno);

	input_filename = mm_strdup(inc_file);
	yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE ));
	yylineno = 1;
	output_line_number();

  	BEGIN(C);
}

/*
 * ecpg_isspace() --- return TRUE if flex scanner considers char whitespace
 */
static bool
ecpg_isspace(char ch)
{
	if (ch == ' ' ||
		ch == '\t' ||
		ch == '\n' ||
		ch == '\r' ||
		ch == '\f')
		return true;
	return false;
}

static bool isdefine(void)
{
	struct _defines *ptr;

	/* is it a define? */
	for (ptr = defines; ptr; ptr = ptr->next)
	{
		if (strcmp(yytext, ptr->old) == 0 && ptr->used == NULL)
		{
			struct _yy_buffer *yb;

			yb = mm_alloc(sizeof(struct _yy_buffer));

			yb->buffer =  YY_CURRENT_BUFFER;
			yb->lineno = yylineno;
			yb->filename = mm_strdup(input_filename);
			yb->next = yy_buffer;

			ptr->used = yy_buffer = yb;

			yy_scan_string(ptr->new);
			return true;
		}
	}

	return false;
}

static bool isinformixdefine(void)
{
	const char *new = NULL;

	if (strcmp(yytext, "dec_t") == 0)
		new = "decimal";
	else if (strcmp(yytext, "intrvl_t") == 0)
	        new = "interval";
	else if (strcmp(yytext, "dtime_t") == 0)
                new = "timestamp";

	if (new)
	{
		struct _yy_buffer *yb;

		yb = mm_alloc(sizeof(struct _yy_buffer));

		yb->buffer =  YY_CURRENT_BUFFER;
		yb->lineno = yylineno;
		yb->filename = mm_strdup(input_filename);
		yb->next = yy_buffer;
		yy_buffer = yb;

		yy_scan_string(new);
		return true;
	}

	return false;
}

/*
 * Called before any actual parsing is done
 */
void
scanner_init(const char *str)
{
	Size	slen = strlen(str);

	/*
	 * Might be left over after ereport()
	 */
	if (YY_CURRENT_BUFFER)
		yy_delete_buffer(YY_CURRENT_BUFFER);

	/*
	 * Make a scan buffer with special termination needed by flex.
	 */
	scanbuf = mm_alloc(slen + 2);
	memcpy(scanbuf, str, slen);
	scanbuf[slen] = scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;
	scanbufhandle = yy_scan_buffer(scanbuf,slen + 2);

	/* initialize literal buffer to a reasonable but expansible size */
	literalalloc = 128;
	literalbuf = (char *) mm_alloc(literalalloc);
	startlit();

	BEGIN(INITIAL);
}


/*
 * Called after parsing is done to clean up after scanner_init()
 */
void
scanner_finish(void)
{
	yy_delete_buffer(scanbufhandle);
	free(scanbuf);
}

